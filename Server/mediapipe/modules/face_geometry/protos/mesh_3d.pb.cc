// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mediapipe/modules/face_geometry/protos/mesh_3d.proto

#include "mediapipe/modules/face_geometry/protos/mesh_3d.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace mediapipe {
namespace face_geometry {
constexpr Mesh3d::Mesh3d(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : vertex_buffer_()
  , index_buffer_()
  , vertex_type_(0)

  , primitive_type_(0)
{}
struct Mesh3dDefaultTypeInternal {
  constexpr Mesh3dDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Mesh3dDefaultTypeInternal() {}
  union {
    Mesh3d _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Mesh3dDefaultTypeInternal _Mesh3d_default_instance_;
}  // namespace face_geometry
}  // namespace mediapipe
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fmesh_5f3d_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fmesh_5f3d_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fmesh_5f3d_2eproto = nullptr;

const uint32_t TableStruct_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fmesh_5f3d_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::mediapipe::face_geometry::Mesh3d, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::face_geometry::Mesh3d, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mediapipe::face_geometry::Mesh3d, vertex_type_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::face_geometry::Mesh3d, primitive_type_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::face_geometry::Mesh3d, vertex_buffer_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::face_geometry::Mesh3d, index_buffer_),
  0,
  1,
  ~0u,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, -1, sizeof(::mediapipe::face_geometry::Mesh3d)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::face_geometry::_Mesh3d_default_instance_),
};

const char descriptor_table_protodef_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fmesh_5f3d_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n4mediapipe/modules/face_geometry/protos"
  "/mesh_3d.proto\022\027mediapipe.face_geometry\""
  "\371\001\n\006Mesh3d\022\?\n\013vertex_type\030\001 \001(\0162*.mediap"
  "ipe.face_geometry.Mesh3d.VertexType\022E\n\016p"
  "rimitive_type\030\002 \001(\0162-.mediapipe.face_geo"
  "metry.Mesh3d.PrimitiveType\022\025\n\rvertex_buf"
  "fer\030\003 \003(\002\022\024\n\014index_buffer\030\004 \003(\r\"\033\n\nVerte"
  "xType\022\r\n\tVERTEX_PT\020\000\"\035\n\rPrimitiveType\022\014\n"
  "\010TRIANGLE\020\000B8\n)com.google.mediapipe.modu"
  "les.facegeometryB\013Mesh3dProto"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fmesh_5f3d_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fmesh_5f3d_2eproto = {
  false, false, 389, descriptor_table_protodef_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fmesh_5f3d_2eproto, "mediapipe/modules/face_geometry/protos/mesh_3d.proto", 
  &descriptor_table_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fmesh_5f3d_2eproto_once, nullptr, 0, 1,
  schemas, file_default_instances, TableStruct_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fmesh_5f3d_2eproto::offsets,
  file_level_metadata_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fmesh_5f3d_2eproto, file_level_enum_descriptors_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fmesh_5f3d_2eproto, file_level_service_descriptors_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fmesh_5f3d_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fmesh_5f3d_2eproto_getter() {
  return &descriptor_table_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fmesh_5f3d_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fmesh_5f3d_2eproto(&descriptor_table_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fmesh_5f3d_2eproto);
namespace mediapipe {
namespace face_geometry {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Mesh3d_VertexType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fmesh_5f3d_2eproto);
  return file_level_enum_descriptors_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fmesh_5f3d_2eproto[0];
}
bool Mesh3d_VertexType_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Mesh3d_VertexType Mesh3d::VERTEX_PT;
constexpr Mesh3d_VertexType Mesh3d::VertexType_MIN;
constexpr Mesh3d_VertexType Mesh3d::VertexType_MAX;
constexpr int Mesh3d::VertexType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Mesh3d_PrimitiveType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fmesh_5f3d_2eproto);
  return file_level_enum_descriptors_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fmesh_5f3d_2eproto[1];
}
bool Mesh3d_PrimitiveType_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Mesh3d_PrimitiveType Mesh3d::TRIANGLE;
constexpr Mesh3d_PrimitiveType Mesh3d::PrimitiveType_MIN;
constexpr Mesh3d_PrimitiveType Mesh3d::PrimitiveType_MAX;
constexpr int Mesh3d::PrimitiveType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class Mesh3d::_Internal {
 public:
  using HasBits = decltype(std::declval<Mesh3d>()._has_bits_);
  static void set_has_vertex_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_primitive_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Mesh3d::Mesh3d(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  vertex_buffer_(arena),
  index_buffer_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mediapipe.face_geometry.Mesh3d)
}
Mesh3d::Mesh3d(const Mesh3d& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      vertex_buffer_(from.vertex_buffer_),
      index_buffer_(from.index_buffer_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&vertex_type_, &from.vertex_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&primitive_type_) -
    reinterpret_cast<char*>(&vertex_type_)) + sizeof(primitive_type_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.face_geometry.Mesh3d)
}

inline void Mesh3d::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&vertex_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&primitive_type_) -
    reinterpret_cast<char*>(&vertex_type_)) + sizeof(primitive_type_));
}

Mesh3d::~Mesh3d() {
  // @@protoc_insertion_point(destructor:mediapipe.face_geometry.Mesh3d)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Mesh3d::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Mesh3d::ArenaDtor(void* object) {
  Mesh3d* _this = reinterpret_cast< Mesh3d* >(object);
  (void)_this;
}
void Mesh3d::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Mesh3d::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Mesh3d::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.face_geometry.Mesh3d)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vertex_buffer_.Clear();
  index_buffer_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&vertex_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&primitive_type_) -
        reinterpret_cast<char*>(&vertex_type_)) + sizeof(primitive_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Mesh3d::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .mediapipe.face_geometry.Mesh3d.VertexType vertex_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mediapipe::face_geometry::Mesh3d_VertexType_IsValid(val))) {
            _internal_set_vertex_type(static_cast<::mediapipe::face_geometry::Mesh3d_VertexType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .mediapipe.face_geometry.Mesh3d.PrimitiveType primitive_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mediapipe::face_geometry::Mesh3d_PrimitiveType_IsValid(val))) {
            _internal_set_primitive_type(static_cast<::mediapipe::face_geometry::Mesh3d_PrimitiveType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated float vertex_buffer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_vertex_buffer(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<29>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_vertex_buffer(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 index_buffer = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_index_buffer(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_index_buffer(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Mesh3d::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.face_geometry.Mesh3d)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mediapipe.face_geometry.Mesh3d.VertexType vertex_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_vertex_type(), target);
  }

  // optional .mediapipe.face_geometry.Mesh3d.PrimitiveType primitive_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_primitive_type(), target);
  }

  // repeated float vertex_buffer = 3;
  for (int i = 0, n = this->_internal_vertex_buffer_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_vertex_buffer(i), target);
  }

  // repeated uint32 index_buffer = 4;
  for (int i = 0, n = this->_internal_index_buffer_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_index_buffer(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.face_geometry.Mesh3d)
  return target;
}

size_t Mesh3d::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.face_geometry.Mesh3d)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float vertex_buffer = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_vertex_buffer_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_vertex_buffer_size());
    total_size += data_size;
  }

  // repeated uint32 index_buffer = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->index_buffer_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_index_buffer_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .mediapipe.face_geometry.Mesh3d.VertexType vertex_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_vertex_type());
    }

    // optional .mediapipe.face_geometry.Mesh3d.PrimitiveType primitive_type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_primitive_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Mesh3d::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Mesh3d::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Mesh3d::GetClassData() const { return &_class_data_; }

void Mesh3d::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Mesh3d *>(to)->MergeFrom(
      static_cast<const Mesh3d &>(from));
}


void Mesh3d::MergeFrom(const Mesh3d& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.face_geometry.Mesh3d)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  vertex_buffer_.MergeFrom(from.vertex_buffer_);
  index_buffer_.MergeFrom(from.index_buffer_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      vertex_type_ = from.vertex_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      primitive_type_ = from.primitive_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Mesh3d::CopyFrom(const Mesh3d& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.face_geometry.Mesh3d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mesh3d::IsInitialized() const {
  return true;
}

void Mesh3d::InternalSwap(Mesh3d* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  vertex_buffer_.InternalSwap(&other->vertex_buffer_);
  index_buffer_.InternalSwap(&other->index_buffer_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Mesh3d, primitive_type_)
      + sizeof(Mesh3d::primitive_type_)
      - PROTOBUF_FIELD_OFFSET(Mesh3d, vertex_type_)>(
          reinterpret_cast<char*>(&vertex_type_),
          reinterpret_cast<char*>(&other->vertex_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Mesh3d::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fmesh_5f3d_2eproto_getter, &descriptor_table_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fmesh_5f3d_2eproto_once,
      file_level_metadata_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fmesh_5f3d_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace face_geometry
}  // namespace mediapipe
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mediapipe::face_geometry::Mesh3d* Arena::CreateMaybeMessage< ::mediapipe::face_geometry::Mesh3d >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::face_geometry::Mesh3d >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
