// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mediapipe/modules/face_geometry/protos/face_geometry.proto

#include "mediapipe/modules/face_geometry/protos/face_geometry.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace mediapipe {
namespace face_geometry {
constexpr FaceGeometry::FaceGeometry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mesh_(nullptr)
  , pose_transform_matrix_(nullptr){}
struct FaceGeometryDefaultTypeInternal {
  constexpr FaceGeometryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FaceGeometryDefaultTypeInternal() {}
  union {
    FaceGeometry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FaceGeometryDefaultTypeInternal _FaceGeometry_default_instance_;
}  // namespace face_geometry
}  // namespace mediapipe
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fface_5fgeometry_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fface_5fgeometry_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fface_5fgeometry_2eproto = nullptr;

const uint32_t TableStruct_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fface_5fgeometry_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::mediapipe::face_geometry::FaceGeometry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::face_geometry::FaceGeometry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mediapipe::face_geometry::FaceGeometry, mesh_),
  PROTOBUF_FIELD_OFFSET(::mediapipe::face_geometry::FaceGeometry, pose_transform_matrix_),
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::mediapipe::face_geometry::FaceGeometry)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mediapipe::face_geometry::_FaceGeometry_default_instance_),
};

const char descriptor_table_protodef_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fface_5fgeometry_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n:mediapipe/modules/face_geometry/protos"
  "/face_geometry.proto\022\027mediapipe.face_geo"
  "metry\032-mediapipe/framework/formats/matri"
  "x_data.proto\0324mediapipe/modules/face_geo"
  "metry/protos/mesh_3d.proto\"s\n\014FaceGeomet"
  "ry\022-\n\004mesh\030\001 \001(\0132\037.mediapipe.face_geomet"
  "ry.Mesh3d\0224\n\025pose_transform_matrix\030\002 \001(\013"
  "2\025.mediapipe.MatrixDataB>\n)com.google.me"
  "diapipe.modules.facegeometryB\021FaceGeomet"
  "ryProto"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fface_5fgeometry_2eproto_deps[2] = {
  &::descriptor_table_mediapipe_2fframework_2fformats_2fmatrix_5fdata_2eproto,
  &::descriptor_table_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fmesh_5f3d_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fface_5fgeometry_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fface_5fgeometry_2eproto = {
  false, false, 367, descriptor_table_protodef_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fface_5fgeometry_2eproto, "mediapipe/modules/face_geometry/protos/face_geometry.proto", 
  &descriptor_table_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fface_5fgeometry_2eproto_once, descriptor_table_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fface_5fgeometry_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fface_5fgeometry_2eproto::offsets,
  file_level_metadata_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fface_5fgeometry_2eproto, file_level_enum_descriptors_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fface_5fgeometry_2eproto, file_level_service_descriptors_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fface_5fgeometry_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fface_5fgeometry_2eproto_getter() {
  return &descriptor_table_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fface_5fgeometry_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fface_5fgeometry_2eproto(&descriptor_table_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fface_5fgeometry_2eproto);
namespace mediapipe {
namespace face_geometry {

// ===================================================================

class FaceGeometry::_Internal {
 public:
  using HasBits = decltype(std::declval<FaceGeometry>()._has_bits_);
  static const ::mediapipe::face_geometry::Mesh3d& mesh(const FaceGeometry* msg);
  static void set_has_mesh(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::mediapipe::MatrixData& pose_transform_matrix(const FaceGeometry* msg);
  static void set_has_pose_transform_matrix(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::mediapipe::face_geometry::Mesh3d&
FaceGeometry::_Internal::mesh(const FaceGeometry* msg) {
  return *msg->mesh_;
}
const ::mediapipe::MatrixData&
FaceGeometry::_Internal::pose_transform_matrix(const FaceGeometry* msg) {
  return *msg->pose_transform_matrix_;
}
void FaceGeometry::clear_mesh() {
  if (mesh_ != nullptr) mesh_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void FaceGeometry::clear_pose_transform_matrix() {
  if (pose_transform_matrix_ != nullptr) pose_transform_matrix_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
FaceGeometry::FaceGeometry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mediapipe.face_geometry.FaceGeometry)
}
FaceGeometry::FaceGeometry(const FaceGeometry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_mesh()) {
    mesh_ = new ::mediapipe::face_geometry::Mesh3d(*from.mesh_);
  } else {
    mesh_ = nullptr;
  }
  if (from._internal_has_pose_transform_matrix()) {
    pose_transform_matrix_ = new ::mediapipe::MatrixData(*from.pose_transform_matrix_);
  } else {
    pose_transform_matrix_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mediapipe.face_geometry.FaceGeometry)
}

inline void FaceGeometry::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&mesh_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pose_transform_matrix_) -
    reinterpret_cast<char*>(&mesh_)) + sizeof(pose_transform_matrix_));
}

FaceGeometry::~FaceGeometry() {
  // @@protoc_insertion_point(destructor:mediapipe.face_geometry.FaceGeometry)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FaceGeometry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete mesh_;
  if (this != internal_default_instance()) delete pose_transform_matrix_;
}

void FaceGeometry::ArenaDtor(void* object) {
  FaceGeometry* _this = reinterpret_cast< FaceGeometry* >(object);
  (void)_this;
}
void FaceGeometry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FaceGeometry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FaceGeometry::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.face_geometry.FaceGeometry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(mesh_ != nullptr);
      mesh_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(pose_transform_matrix_ != nullptr);
      pose_transform_matrix_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FaceGeometry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .mediapipe.face_geometry.Mesh3d mesh = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_mesh(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .mediapipe.MatrixData pose_transform_matrix = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose_transform_matrix(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FaceGeometry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.face_geometry.FaceGeometry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mediapipe.face_geometry.Mesh3d mesh = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::mesh(this), target, stream);
  }

  // optional .mediapipe.MatrixData pose_transform_matrix = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::pose_transform_matrix(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.face_geometry.FaceGeometry)
  return target;
}

size_t FaceGeometry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.face_geometry.FaceGeometry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .mediapipe.face_geometry.Mesh3d mesh = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mesh_);
    }

    // optional .mediapipe.MatrixData pose_transform_matrix = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pose_transform_matrix_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FaceGeometry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FaceGeometry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FaceGeometry::GetClassData() const { return &_class_data_; }

void FaceGeometry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FaceGeometry *>(to)->MergeFrom(
      static_cast<const FaceGeometry &>(from));
}


void FaceGeometry::MergeFrom(const FaceGeometry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.face_geometry.FaceGeometry)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_mesh()->::mediapipe::face_geometry::Mesh3d::MergeFrom(from._internal_mesh());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_pose_transform_matrix()->::mediapipe::MatrixData::MergeFrom(from._internal_pose_transform_matrix());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FaceGeometry::CopyFrom(const FaceGeometry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.face_geometry.FaceGeometry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaceGeometry::IsInitialized() const {
  return true;
}

void FaceGeometry::InternalSwap(FaceGeometry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FaceGeometry, pose_transform_matrix_)
      + sizeof(FaceGeometry::pose_transform_matrix_)
      - PROTOBUF_FIELD_OFFSET(FaceGeometry, mesh_)>(
          reinterpret_cast<char*>(&mesh_),
          reinterpret_cast<char*>(&other->mesh_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FaceGeometry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fface_5fgeometry_2eproto_getter, &descriptor_table_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fface_5fgeometry_2eproto_once,
      file_level_metadata_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fface_5fgeometry_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace face_geometry
}  // namespace mediapipe
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mediapipe::face_geometry::FaceGeometry* Arena::CreateMaybeMessage< ::mediapipe::face_geometry::FaceGeometry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mediapipe::face_geometry::FaceGeometry >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
