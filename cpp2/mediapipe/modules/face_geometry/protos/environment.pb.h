// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mediapipe/modules/face_geometry/protos/environment.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fenvironment_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fenvironment_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fenvironment_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fenvironment_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fenvironment_2eproto;
namespace mediapipe {
namespace face_geometry {
class Environment;
struct EnvironmentDefaultTypeInternal;
extern EnvironmentDefaultTypeInternal _Environment_default_instance_;
class PerspectiveCamera;
struct PerspectiveCameraDefaultTypeInternal;
extern PerspectiveCameraDefaultTypeInternal _PerspectiveCamera_default_instance_;
}  // namespace face_geometry
}  // namespace mediapipe
PROTOBUF_NAMESPACE_OPEN
template<> ::mediapipe::face_geometry::Environment* Arena::CreateMaybeMessage<::mediapipe::face_geometry::Environment>(Arena*);
template<> ::mediapipe::face_geometry::PerspectiveCamera* Arena::CreateMaybeMessage<::mediapipe::face_geometry::PerspectiveCamera>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mediapipe {
namespace face_geometry {

enum OriginPointLocation : int {
  BOTTOM_LEFT_CORNER = 1,
  TOP_LEFT_CORNER = 2
};
bool OriginPointLocation_IsValid(int value);
constexpr OriginPointLocation OriginPointLocation_MIN = BOTTOM_LEFT_CORNER;
constexpr OriginPointLocation OriginPointLocation_MAX = TOP_LEFT_CORNER;
constexpr int OriginPointLocation_ARRAYSIZE = OriginPointLocation_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OriginPointLocation_descriptor();
template<typename T>
inline const std::string& OriginPointLocation_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OriginPointLocation>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OriginPointLocation_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    OriginPointLocation_descriptor(), enum_t_value);
}
inline bool OriginPointLocation_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, OriginPointLocation* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<OriginPointLocation>(
    OriginPointLocation_descriptor(), name, value);
}
// ===================================================================

class PerspectiveCamera final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.face_geometry.PerspectiveCamera) */ {
 public:
  inline PerspectiveCamera() : PerspectiveCamera(nullptr) {}
  ~PerspectiveCamera() override;
  explicit constexpr PerspectiveCamera(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PerspectiveCamera(const PerspectiveCamera& from);
  PerspectiveCamera(PerspectiveCamera&& from) noexcept
    : PerspectiveCamera() {
    *this = ::std::move(from);
  }

  inline PerspectiveCamera& operator=(const PerspectiveCamera& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerspectiveCamera& operator=(PerspectiveCamera&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PerspectiveCamera& default_instance() {
    return *internal_default_instance();
  }
  static inline const PerspectiveCamera* internal_default_instance() {
    return reinterpret_cast<const PerspectiveCamera*>(
               &_PerspectiveCamera_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PerspectiveCamera& a, PerspectiveCamera& b) {
    a.Swap(&b);
  }
  inline void Swap(PerspectiveCamera* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PerspectiveCamera* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PerspectiveCamera* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PerspectiveCamera>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PerspectiveCamera& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PerspectiveCamera& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PerspectiveCamera* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.face_geometry.PerspectiveCamera";
  }
  protected:
  explicit PerspectiveCamera(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVerticalFovDegreesFieldNumber = 1,
    kNearFieldNumber = 2,
    kFarFieldNumber = 3,
  };
  // optional float vertical_fov_degrees = 1;
  bool has_vertical_fov_degrees() const;
  private:
  bool _internal_has_vertical_fov_degrees() const;
  public:
  void clear_vertical_fov_degrees();
  float vertical_fov_degrees() const;
  void set_vertical_fov_degrees(float value);
  private:
  float _internal_vertical_fov_degrees() const;
  void _internal_set_vertical_fov_degrees(float value);
  public:

  // optional float near = 2;
  bool has_near() const;
  private:
  bool _internal_has_near() const;
  public:
  void clear_near();
  float near() const;
  void set_near(float value);
  private:
  float _internal_near() const;
  void _internal_set_near(float value);
  public:

  // optional float far = 3;
  bool has_far() const;
  private:
  bool _internal_has_far() const;
  public:
  void clear_far();
  float far() const;
  void set_far(float value);
  private:
  float _internal_far() const;
  void _internal_set_far(float value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.face_geometry.PerspectiveCamera)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float vertical_fov_degrees_;
  float near_;
  float far_;
  friend struct ::TableStruct_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fenvironment_2eproto;
};
// -------------------------------------------------------------------

class Environment final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.face_geometry.Environment) */ {
 public:
  inline Environment() : Environment(nullptr) {}
  ~Environment() override;
  explicit constexpr Environment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Environment(const Environment& from);
  Environment(Environment&& from) noexcept
    : Environment() {
    *this = ::std::move(from);
  }

  inline Environment& operator=(const Environment& from) {
    CopyFrom(from);
    return *this;
  }
  inline Environment& operator=(Environment&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Environment& default_instance() {
    return *internal_default_instance();
  }
  static inline const Environment* internal_default_instance() {
    return reinterpret_cast<const Environment*>(
               &_Environment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Environment& a, Environment& b) {
    a.Swap(&b);
  }
  inline void Swap(Environment* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Environment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Environment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Environment>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Environment& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Environment& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Environment* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mediapipe.face_geometry.Environment";
  }
  protected:
  explicit Environment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPerspectiveCameraFieldNumber = 2,
    kOriginPointLocationFieldNumber = 1,
  };
  // optional .mediapipe.face_geometry.PerspectiveCamera perspective_camera = 2;
  bool has_perspective_camera() const;
  private:
  bool _internal_has_perspective_camera() const;
  public:
  void clear_perspective_camera();
  const ::mediapipe::face_geometry::PerspectiveCamera& perspective_camera() const;
  PROTOBUF_NODISCARD ::mediapipe::face_geometry::PerspectiveCamera* release_perspective_camera();
  ::mediapipe::face_geometry::PerspectiveCamera* mutable_perspective_camera();
  void set_allocated_perspective_camera(::mediapipe::face_geometry::PerspectiveCamera* perspective_camera);
  private:
  const ::mediapipe::face_geometry::PerspectiveCamera& _internal_perspective_camera() const;
  ::mediapipe::face_geometry::PerspectiveCamera* _internal_mutable_perspective_camera();
  public:
  void unsafe_arena_set_allocated_perspective_camera(
      ::mediapipe::face_geometry::PerspectiveCamera* perspective_camera);
  ::mediapipe::face_geometry::PerspectiveCamera* unsafe_arena_release_perspective_camera();

  // optional .mediapipe.face_geometry.OriginPointLocation origin_point_location = 1;
  bool has_origin_point_location() const;
  private:
  bool _internal_has_origin_point_location() const;
  public:
  void clear_origin_point_location();
  ::mediapipe::face_geometry::OriginPointLocation origin_point_location() const;
  void set_origin_point_location(::mediapipe::face_geometry::OriginPointLocation value);
  private:
  ::mediapipe::face_geometry::OriginPointLocation _internal_origin_point_location() const;
  void _internal_set_origin_point_location(::mediapipe::face_geometry::OriginPointLocation value);
  public:

  // @@protoc_insertion_point(class_scope:mediapipe.face_geometry.Environment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::mediapipe::face_geometry::PerspectiveCamera* perspective_camera_;
  int origin_point_location_;
  friend struct ::TableStruct_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fenvironment_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PerspectiveCamera

// optional float vertical_fov_degrees = 1;
inline bool PerspectiveCamera::_internal_has_vertical_fov_degrees() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PerspectiveCamera::has_vertical_fov_degrees() const {
  return _internal_has_vertical_fov_degrees();
}
inline void PerspectiveCamera::clear_vertical_fov_degrees() {
  vertical_fov_degrees_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float PerspectiveCamera::_internal_vertical_fov_degrees() const {
  return vertical_fov_degrees_;
}
inline float PerspectiveCamera::vertical_fov_degrees() const {
  // @@protoc_insertion_point(field_get:mediapipe.face_geometry.PerspectiveCamera.vertical_fov_degrees)
  return _internal_vertical_fov_degrees();
}
inline void PerspectiveCamera::_internal_set_vertical_fov_degrees(float value) {
  _has_bits_[0] |= 0x00000001u;
  vertical_fov_degrees_ = value;
}
inline void PerspectiveCamera::set_vertical_fov_degrees(float value) {
  _internal_set_vertical_fov_degrees(value);
  // @@protoc_insertion_point(field_set:mediapipe.face_geometry.PerspectiveCamera.vertical_fov_degrees)
}

// optional float near = 2;
inline bool PerspectiveCamera::_internal_has_near() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PerspectiveCamera::has_near() const {
  return _internal_has_near();
}
inline void PerspectiveCamera::clear_near() {
  near_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float PerspectiveCamera::_internal_near() const {
  return near_;
}
inline float PerspectiveCamera::near() const {
  // @@protoc_insertion_point(field_get:mediapipe.face_geometry.PerspectiveCamera.near)
  return _internal_near();
}
inline void PerspectiveCamera::_internal_set_near(float value) {
  _has_bits_[0] |= 0x00000002u;
  near_ = value;
}
inline void PerspectiveCamera::set_near(float value) {
  _internal_set_near(value);
  // @@protoc_insertion_point(field_set:mediapipe.face_geometry.PerspectiveCamera.near)
}

// optional float far = 3;
inline bool PerspectiveCamera::_internal_has_far() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PerspectiveCamera::has_far() const {
  return _internal_has_far();
}
inline void PerspectiveCamera::clear_far() {
  far_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float PerspectiveCamera::_internal_far() const {
  return far_;
}
inline float PerspectiveCamera::far() const {
  // @@protoc_insertion_point(field_get:mediapipe.face_geometry.PerspectiveCamera.far)
  return _internal_far();
}
inline void PerspectiveCamera::_internal_set_far(float value) {
  _has_bits_[0] |= 0x00000004u;
  far_ = value;
}
inline void PerspectiveCamera::set_far(float value) {
  _internal_set_far(value);
  // @@protoc_insertion_point(field_set:mediapipe.face_geometry.PerspectiveCamera.far)
}

// -------------------------------------------------------------------

// Environment

// optional .mediapipe.face_geometry.OriginPointLocation origin_point_location = 1;
inline bool Environment::_internal_has_origin_point_location() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Environment::has_origin_point_location() const {
  return _internal_has_origin_point_location();
}
inline void Environment::clear_origin_point_location() {
  origin_point_location_ = 1;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::mediapipe::face_geometry::OriginPointLocation Environment::_internal_origin_point_location() const {
  return static_cast< ::mediapipe::face_geometry::OriginPointLocation >(origin_point_location_);
}
inline ::mediapipe::face_geometry::OriginPointLocation Environment::origin_point_location() const {
  // @@protoc_insertion_point(field_get:mediapipe.face_geometry.Environment.origin_point_location)
  return _internal_origin_point_location();
}
inline void Environment::_internal_set_origin_point_location(::mediapipe::face_geometry::OriginPointLocation value) {
  assert(::mediapipe::face_geometry::OriginPointLocation_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  origin_point_location_ = value;
}
inline void Environment::set_origin_point_location(::mediapipe::face_geometry::OriginPointLocation value) {
  _internal_set_origin_point_location(value);
  // @@protoc_insertion_point(field_set:mediapipe.face_geometry.Environment.origin_point_location)
}

// optional .mediapipe.face_geometry.PerspectiveCamera perspective_camera = 2;
inline bool Environment::_internal_has_perspective_camera() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || perspective_camera_ != nullptr);
  return value;
}
inline bool Environment::has_perspective_camera() const {
  return _internal_has_perspective_camera();
}
inline void Environment::clear_perspective_camera() {
  if (perspective_camera_ != nullptr) perspective_camera_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mediapipe::face_geometry::PerspectiveCamera& Environment::_internal_perspective_camera() const {
  const ::mediapipe::face_geometry::PerspectiveCamera* p = perspective_camera_;
  return p != nullptr ? *p : reinterpret_cast<const ::mediapipe::face_geometry::PerspectiveCamera&>(
      ::mediapipe::face_geometry::_PerspectiveCamera_default_instance_);
}
inline const ::mediapipe::face_geometry::PerspectiveCamera& Environment::perspective_camera() const {
  // @@protoc_insertion_point(field_get:mediapipe.face_geometry.Environment.perspective_camera)
  return _internal_perspective_camera();
}
inline void Environment::unsafe_arena_set_allocated_perspective_camera(
    ::mediapipe::face_geometry::PerspectiveCamera* perspective_camera) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(perspective_camera_);
  }
  perspective_camera_ = perspective_camera;
  if (perspective_camera) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mediapipe.face_geometry.Environment.perspective_camera)
}
inline ::mediapipe::face_geometry::PerspectiveCamera* Environment::release_perspective_camera() {
  _has_bits_[0] &= ~0x00000001u;
  ::mediapipe::face_geometry::PerspectiveCamera* temp = perspective_camera_;
  perspective_camera_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mediapipe::face_geometry::PerspectiveCamera* Environment::unsafe_arena_release_perspective_camera() {
  // @@protoc_insertion_point(field_release:mediapipe.face_geometry.Environment.perspective_camera)
  _has_bits_[0] &= ~0x00000001u;
  ::mediapipe::face_geometry::PerspectiveCamera* temp = perspective_camera_;
  perspective_camera_ = nullptr;
  return temp;
}
inline ::mediapipe::face_geometry::PerspectiveCamera* Environment::_internal_mutable_perspective_camera() {
  _has_bits_[0] |= 0x00000001u;
  if (perspective_camera_ == nullptr) {
    auto* p = CreateMaybeMessage<::mediapipe::face_geometry::PerspectiveCamera>(GetArenaForAllocation());
    perspective_camera_ = p;
  }
  return perspective_camera_;
}
inline ::mediapipe::face_geometry::PerspectiveCamera* Environment::mutable_perspective_camera() {
  ::mediapipe::face_geometry::PerspectiveCamera* _msg = _internal_mutable_perspective_camera();
  // @@protoc_insertion_point(field_mutable:mediapipe.face_geometry.Environment.perspective_camera)
  return _msg;
}
inline void Environment::set_allocated_perspective_camera(::mediapipe::face_geometry::PerspectiveCamera* perspective_camera) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete perspective_camera_;
  }
  if (perspective_camera) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::mediapipe::face_geometry::PerspectiveCamera>::GetOwningArena(perspective_camera);
    if (message_arena != submessage_arena) {
      perspective_camera = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, perspective_camera, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  perspective_camera_ = perspective_camera;
  // @@protoc_insertion_point(field_set_allocated:mediapipe.face_geometry.Environment.perspective_camera)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace face_geometry
}  // namespace mediapipe

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mediapipe::face_geometry::OriginPointLocation> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mediapipe::face_geometry::OriginPointLocation>() {
  return ::mediapipe::face_geometry::OriginPointLocation_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fmodules_2fface_5fgeometry_2fprotos_2fenvironment_2eproto
