// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ServerSend.proto

#include "ServerSend.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace ZenboNurseHelperProtobuf {
constexpr ReportAndCommand_OpenPosePose_OpenPoseCoordinate::ReportAndCommand_OpenPosePose_OpenPoseCoordinate(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(int64_t{0})
  , y_(int64_t{0})
  , valid_(int64_t{0}){}
struct ReportAndCommand_OpenPosePose_OpenPoseCoordinateDefaultTypeInternal {
  constexpr ReportAndCommand_OpenPosePose_OpenPoseCoordinateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReportAndCommand_OpenPosePose_OpenPoseCoordinateDefaultTypeInternal() {}
  union {
    ReportAndCommand_OpenPosePose_OpenPoseCoordinate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReportAndCommand_OpenPosePose_OpenPoseCoordinateDefaultTypeInternal _ReportAndCommand_OpenPosePose_OpenPoseCoordinate_default_instance_;
constexpr ReportAndCommand_OpenPosePose::ReportAndCommand_OpenPosePose(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : coord_()
  , score_(int64_t{0}){}
struct ReportAndCommand_OpenPosePoseDefaultTypeInternal {
  constexpr ReportAndCommand_OpenPosePoseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReportAndCommand_OpenPosePoseDefaultTypeInternal() {}
  union {
    ReportAndCommand_OpenPosePose _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReportAndCommand_OpenPosePoseDefaultTypeInternal _ReportAndCommand_OpenPosePose_default_instance_;
constexpr ReportAndCommand::ReportAndCommand(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pose_()
  , speak_sentence_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , time_stamp_(uint64_t{0u})
  , pitch_degree_(0)
  , x_(0)
  , y_(0)
  , degree_(0)
  , bodyspeed_(0)
  , yaw_(0)
  , pitch_(0)
  , headspeed_(0)
  , face_(0)
  , speed_(0)
  , volume_(0)
  , speak_pitch_(0)
  , movemode_(0)

  , stopmove_(0)
  , predefined_action_(0){}
struct ReportAndCommandDefaultTypeInternal {
  constexpr ReportAndCommandDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReportAndCommandDefaultTypeInternal() {}
  union {
    ReportAndCommand _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReportAndCommandDefaultTypeInternal _ReportAndCommand_default_instance_;
}  // namespace ZenboNurseHelperProtobuf
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ServerSend_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_ServerSend_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ServerSend_2eproto = nullptr;

const uint32_t TableStruct_ServerSend_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::ZenboNurseHelperProtobuf::ReportAndCommand_OpenPosePose_OpenPoseCoordinate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ZenboNurseHelperProtobuf::ReportAndCommand_OpenPosePose_OpenPoseCoordinate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ZenboNurseHelperProtobuf::ReportAndCommand_OpenPosePose_OpenPoseCoordinate, x_),
  PROTOBUF_FIELD_OFFSET(::ZenboNurseHelperProtobuf::ReportAndCommand_OpenPosePose_OpenPoseCoordinate, y_),
  PROTOBUF_FIELD_OFFSET(::ZenboNurseHelperProtobuf::ReportAndCommand_OpenPosePose_OpenPoseCoordinate, valid_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ZenboNurseHelperProtobuf::ReportAndCommand_OpenPosePose, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ZenboNurseHelperProtobuf::ReportAndCommand_OpenPosePose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ZenboNurseHelperProtobuf::ReportAndCommand_OpenPosePose, score_),
  PROTOBUF_FIELD_OFFSET(::ZenboNurseHelperProtobuf::ReportAndCommand_OpenPosePose, coord_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ZenboNurseHelperProtobuf::ReportAndCommand, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ZenboNurseHelperProtobuf::ReportAndCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ZenboNurseHelperProtobuf::ReportAndCommand, time_stamp_),
  PROTOBUF_FIELD_OFFSET(::ZenboNurseHelperProtobuf::ReportAndCommand, pitch_degree_),
  PROTOBUF_FIELD_OFFSET(::ZenboNurseHelperProtobuf::ReportAndCommand, pose_),
  PROTOBUF_FIELD_OFFSET(::ZenboNurseHelperProtobuf::ReportAndCommand, speak_sentence_),
  PROTOBUF_FIELD_OFFSET(::ZenboNurseHelperProtobuf::ReportAndCommand, x_),
  PROTOBUF_FIELD_OFFSET(::ZenboNurseHelperProtobuf::ReportAndCommand, y_),
  PROTOBUF_FIELD_OFFSET(::ZenboNurseHelperProtobuf::ReportAndCommand, degree_),
  PROTOBUF_FIELD_OFFSET(::ZenboNurseHelperProtobuf::ReportAndCommand, bodyspeed_),
  PROTOBUF_FIELD_OFFSET(::ZenboNurseHelperProtobuf::ReportAndCommand, yaw_),
  PROTOBUF_FIELD_OFFSET(::ZenboNurseHelperProtobuf::ReportAndCommand, pitch_),
  PROTOBUF_FIELD_OFFSET(::ZenboNurseHelperProtobuf::ReportAndCommand, headspeed_),
  PROTOBUF_FIELD_OFFSET(::ZenboNurseHelperProtobuf::ReportAndCommand, face_),
  PROTOBUF_FIELD_OFFSET(::ZenboNurseHelperProtobuf::ReportAndCommand, speed_),
  PROTOBUF_FIELD_OFFSET(::ZenboNurseHelperProtobuf::ReportAndCommand, volume_),
  PROTOBUF_FIELD_OFFSET(::ZenboNurseHelperProtobuf::ReportAndCommand, speak_pitch_),
  PROTOBUF_FIELD_OFFSET(::ZenboNurseHelperProtobuf::ReportAndCommand, movemode_),
  PROTOBUF_FIELD_OFFSET(::ZenboNurseHelperProtobuf::ReportAndCommand, stopmove_),
  PROTOBUF_FIELD_OFFSET(::ZenboNurseHelperProtobuf::ReportAndCommand, predefined_action_),
  1,
  2,
  ~0u,
  0,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::ZenboNurseHelperProtobuf::ReportAndCommand_OpenPosePose_OpenPoseCoordinate)},
  { 12, 20, -1, sizeof(::ZenboNurseHelperProtobuf::ReportAndCommand_OpenPosePose)},
  { 22, 46, -1, sizeof(::ZenboNurseHelperProtobuf::ReportAndCommand)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ZenboNurseHelperProtobuf::_ReportAndCommand_OpenPosePose_OpenPoseCoordinate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ZenboNurseHelperProtobuf::_ReportAndCommand_OpenPosePose_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ZenboNurseHelperProtobuf::_ReportAndCommand_default_instance_),
};

const char descriptor_table_protodef_ServerSend_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020ServerSend.proto\022\030ZenboNurseHelperProt"
  "obuf\"\242\005\n\020ReportAndCommand\022\022\n\ntime_stamp\030"
  "\001 \001(\004\022\024\n\014pitch_degree\030\002 \001(\005\022E\n\004pose\030\003 \003("
  "\01327.ZenboNurseHelperProtobuf.ReportAndCo"
  "mmand.OpenPosePose\022\026\n\016speak_sentence\030\004 \001"
  "(\t\022\t\n\001x\030\005 \001(\005\022\t\n\001y\030\006 \001(\005\022\016\n\006degree\030\007 \001(\005"
  "\022\021\n\tbodyspeed\030\010 \001(\005\022\013\n\003yaw\030\t \001(\005\022\r\n\005pitc"
  "h\030\n \001(\005\022\021\n\theadspeed\030\013 \001(\005\022\014\n\004face\030\014 \001(\005"
  "\022\r\n\005speed\030\r \001(\005\022\016\n\006volume\030\016 \001(\005\022\023\n\013speak"
  "_pitch\030\017 \001(\005\022I\n\010movemode\030\020 \001(\01627.ZenboNu"
  "rseHelperProtobuf.ReportAndCommand.MoveM"
  "odeEnum\022\020\n\010stopmove\030\021 \001(\005\022\031\n\021predefined_"
  "action\030\022 \001(\005\032\263\001\n\014OpenPosePose\022\r\n\005score\030\001"
  " \002(\003\022Y\n\005coord\030\002 \003(\0132J.ZenboNurseHelperPr"
  "otobuf.ReportAndCommand.OpenPosePose.Ope"
  "nPoseCoordinate\0329\n\022OpenPoseCoordinate\022\t\n"
  "\001x\030\001 \002(\003\022\t\n\001y\030\002 \002(\003\022\r\n\005valid\030\003 \002(\003\"-\n\014Mo"
  "veModeEnum\022\n\n\006Manual\020\000\022\021\n\rLookForPeople\020"
  "\001"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ServerSend_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ServerSend_2eproto = {
  false, false, 721, descriptor_table_protodef_ServerSend_2eproto, "ServerSend.proto", 
  &descriptor_table_ServerSend_2eproto_once, nullptr, 0, 3,
  schemas, file_default_instances, TableStruct_ServerSend_2eproto::offsets,
  file_level_metadata_ServerSend_2eproto, file_level_enum_descriptors_ServerSend_2eproto, file_level_service_descriptors_ServerSend_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_ServerSend_2eproto_getter() {
  return &descriptor_table_ServerSend_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_ServerSend_2eproto(&descriptor_table_ServerSend_2eproto);
namespace ZenboNurseHelperProtobuf {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReportAndCommand_MoveModeEnum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ServerSend_2eproto);
  return file_level_enum_descriptors_ServerSend_2eproto[0];
}
bool ReportAndCommand_MoveModeEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ReportAndCommand_MoveModeEnum ReportAndCommand::Manual;
constexpr ReportAndCommand_MoveModeEnum ReportAndCommand::LookForPeople;
constexpr ReportAndCommand_MoveModeEnum ReportAndCommand::MoveModeEnum_MIN;
constexpr ReportAndCommand_MoveModeEnum ReportAndCommand::MoveModeEnum_MAX;
constexpr int ReportAndCommand::MoveModeEnum_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class ReportAndCommand_OpenPosePose_OpenPoseCoordinate::_Internal {
 public:
  using HasBits = decltype(std::declval<ReportAndCommand_OpenPosePose_OpenPoseCoordinate>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

ReportAndCommand_OpenPosePose_OpenPoseCoordinate::ReportAndCommand_OpenPosePose_OpenPoseCoordinate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ZenboNurseHelperProtobuf.ReportAndCommand.OpenPosePose.OpenPoseCoordinate)
}
ReportAndCommand_OpenPosePose_OpenPoseCoordinate::ReportAndCommand_OpenPosePose_OpenPoseCoordinate(const ReportAndCommand_OpenPosePose_OpenPoseCoordinate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&valid_) -
    reinterpret_cast<char*>(&x_)) + sizeof(valid_));
  // @@protoc_insertion_point(copy_constructor:ZenboNurseHelperProtobuf.ReportAndCommand.OpenPosePose.OpenPoseCoordinate)
}

inline void ReportAndCommand_OpenPosePose_OpenPoseCoordinate::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&valid_) -
    reinterpret_cast<char*>(&x_)) + sizeof(valid_));
}

ReportAndCommand_OpenPosePose_OpenPoseCoordinate::~ReportAndCommand_OpenPosePose_OpenPoseCoordinate() {
  // @@protoc_insertion_point(destructor:ZenboNurseHelperProtobuf.ReportAndCommand.OpenPosePose.OpenPoseCoordinate)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ReportAndCommand_OpenPosePose_OpenPoseCoordinate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ReportAndCommand_OpenPosePose_OpenPoseCoordinate::ArenaDtor(void* object) {
  ReportAndCommand_OpenPosePose_OpenPoseCoordinate* _this = reinterpret_cast< ReportAndCommand_OpenPosePose_OpenPoseCoordinate* >(object);
  (void)_this;
}
void ReportAndCommand_OpenPosePose_OpenPoseCoordinate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReportAndCommand_OpenPosePose_OpenPoseCoordinate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReportAndCommand_OpenPosePose_OpenPoseCoordinate::Clear() {
// @@protoc_insertion_point(message_clear_start:ZenboNurseHelperProtobuf.ReportAndCommand.OpenPosePose.OpenPoseCoordinate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&valid_) -
        reinterpret_cast<char*>(&x_)) + sizeof(valid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReportAndCommand_OpenPosePose_OpenPoseCoordinate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int64 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 valid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_valid(&has_bits);
          valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReportAndCommand_OpenPosePose_OpenPoseCoordinate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ZenboNurseHelperProtobuf.ReportAndCommand.OpenPosePose.OpenPoseCoordinate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_x(), target);
  }

  // required int64 y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_y(), target);
  }

  // required int64 valid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_valid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ZenboNurseHelperProtobuf.ReportAndCommand.OpenPosePose.OpenPoseCoordinate)
  return target;
}

size_t ReportAndCommand_OpenPosePose_OpenPoseCoordinate::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ZenboNurseHelperProtobuf.ReportAndCommand.OpenPosePose.OpenPoseCoordinate)
  size_t total_size = 0;

  if (_internal_has_x()) {
    // required int64 x = 1;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_x());
  }

  if (_internal_has_y()) {
    // required int64 y = 2;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_y());
  }

  if (_internal_has_valid()) {
    // required int64 valid = 3;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_valid());
  }

  return total_size;
}
size_t ReportAndCommand_OpenPosePose_OpenPoseCoordinate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ZenboNurseHelperProtobuf.ReportAndCommand.OpenPosePose.OpenPoseCoordinate)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int64 x = 1;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_x());

    // required int64 y = 2;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_y());

    // required int64 valid = 3;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_valid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReportAndCommand_OpenPosePose_OpenPoseCoordinate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReportAndCommand_OpenPosePose_OpenPoseCoordinate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReportAndCommand_OpenPosePose_OpenPoseCoordinate::GetClassData() const { return &_class_data_; }

void ReportAndCommand_OpenPosePose_OpenPoseCoordinate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReportAndCommand_OpenPosePose_OpenPoseCoordinate *>(to)->MergeFrom(
      static_cast<const ReportAndCommand_OpenPosePose_OpenPoseCoordinate &>(from));
}


void ReportAndCommand_OpenPosePose_OpenPoseCoordinate::MergeFrom(const ReportAndCommand_OpenPosePose_OpenPoseCoordinate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ZenboNurseHelperProtobuf.ReportAndCommand.OpenPosePose.OpenPoseCoordinate)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      valid_ = from.valid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReportAndCommand_OpenPosePose_OpenPoseCoordinate::CopyFrom(const ReportAndCommand_OpenPosePose_OpenPoseCoordinate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ZenboNurseHelperProtobuf.ReportAndCommand.OpenPosePose.OpenPoseCoordinate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportAndCommand_OpenPosePose_OpenPoseCoordinate::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ReportAndCommand_OpenPosePose_OpenPoseCoordinate::InternalSwap(ReportAndCommand_OpenPosePose_OpenPoseCoordinate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReportAndCommand_OpenPosePose_OpenPoseCoordinate, valid_)
      + sizeof(ReportAndCommand_OpenPosePose_OpenPoseCoordinate::valid_)
      - PROTOBUF_FIELD_OFFSET(ReportAndCommand_OpenPosePose_OpenPoseCoordinate, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReportAndCommand_OpenPosePose_OpenPoseCoordinate::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ServerSend_2eproto_getter, &descriptor_table_ServerSend_2eproto_once,
      file_level_metadata_ServerSend_2eproto[0]);
}

// ===================================================================

class ReportAndCommand_OpenPosePose::_Internal {
 public:
  using HasBits = decltype(std::declval<ReportAndCommand_OpenPosePose>()._has_bits_);
  static void set_has_score(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

ReportAndCommand_OpenPosePose::ReportAndCommand_OpenPosePose(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  coord_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ZenboNurseHelperProtobuf.ReportAndCommand.OpenPosePose)
}
ReportAndCommand_OpenPosePose::ReportAndCommand_OpenPosePose(const ReportAndCommand_OpenPosePose& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      coord_(from.coord_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  score_ = from.score_;
  // @@protoc_insertion_point(copy_constructor:ZenboNurseHelperProtobuf.ReportAndCommand.OpenPosePose)
}

inline void ReportAndCommand_OpenPosePose::SharedCtor() {
score_ = int64_t{0};
}

ReportAndCommand_OpenPosePose::~ReportAndCommand_OpenPosePose() {
  // @@protoc_insertion_point(destructor:ZenboNurseHelperProtobuf.ReportAndCommand.OpenPosePose)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ReportAndCommand_OpenPosePose::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ReportAndCommand_OpenPosePose::ArenaDtor(void* object) {
  ReportAndCommand_OpenPosePose* _this = reinterpret_cast< ReportAndCommand_OpenPosePose* >(object);
  (void)_this;
}
void ReportAndCommand_OpenPosePose::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReportAndCommand_OpenPosePose::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReportAndCommand_OpenPosePose::Clear() {
// @@protoc_insertion_point(message_clear_start:ZenboNurseHelperProtobuf.ReportAndCommand.OpenPosePose)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  coord_.Clear();
  score_ = int64_t{0};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReportAndCommand_OpenPosePose::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int64 score = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_score(&has_bits);
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .ZenboNurseHelperProtobuf.ReportAndCommand.OpenPosePose.OpenPoseCoordinate coord = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_coord(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReportAndCommand_OpenPosePose::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ZenboNurseHelperProtobuf.ReportAndCommand.OpenPosePose)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 score = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_score(), target);
  }

  // repeated .ZenboNurseHelperProtobuf.ReportAndCommand.OpenPosePose.OpenPoseCoordinate coord = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_coord_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_coord(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ZenboNurseHelperProtobuf.ReportAndCommand.OpenPosePose)
  return target;
}

size_t ReportAndCommand_OpenPosePose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ZenboNurseHelperProtobuf.ReportAndCommand.OpenPosePose)
  size_t total_size = 0;

  // required int64 score = 1;
  if (_internal_has_score()) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_score());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ZenboNurseHelperProtobuf.ReportAndCommand.OpenPosePose.OpenPoseCoordinate coord = 2;
  total_size += 1UL * this->_internal_coord_size();
  for (const auto& msg : this->coord_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReportAndCommand_OpenPosePose::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReportAndCommand_OpenPosePose::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReportAndCommand_OpenPosePose::GetClassData() const { return &_class_data_; }

void ReportAndCommand_OpenPosePose::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReportAndCommand_OpenPosePose *>(to)->MergeFrom(
      static_cast<const ReportAndCommand_OpenPosePose &>(from));
}


void ReportAndCommand_OpenPosePose::MergeFrom(const ReportAndCommand_OpenPosePose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ZenboNurseHelperProtobuf.ReportAndCommand.OpenPosePose)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  coord_.MergeFrom(from.coord_);
  if (from._internal_has_score()) {
    _internal_set_score(from._internal_score());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReportAndCommand_OpenPosePose::CopyFrom(const ReportAndCommand_OpenPosePose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ZenboNurseHelperProtobuf.ReportAndCommand.OpenPosePose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportAndCommand_OpenPosePose::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(coord_))
    return false;
  return true;
}

void ReportAndCommand_OpenPosePose::InternalSwap(ReportAndCommand_OpenPosePose* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  coord_.InternalSwap(&other->coord_);
  swap(score_, other->score_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReportAndCommand_OpenPosePose::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ServerSend_2eproto_getter, &descriptor_table_ServerSend_2eproto_once,
      file_level_metadata_ServerSend_2eproto[1]);
}

// ===================================================================

class ReportAndCommand::_Internal {
 public:
  using HasBits = decltype(std::declval<ReportAndCommand>()._has_bits_);
  static void set_has_time_stamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_pitch_degree(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_speak_sentence(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_degree(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_bodyspeed(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_yaw(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_pitch(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_headspeed(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_face(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_volume(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_speak_pitch(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_movemode(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_stopmove(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_predefined_action(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
};

ReportAndCommand::ReportAndCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  pose_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ZenboNurseHelperProtobuf.ReportAndCommand)
}
ReportAndCommand::ReportAndCommand(const ReportAndCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      pose_(from.pose_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  speak_sentence_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    speak_sentence_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_speak_sentence()) {
    speak_sentence_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_speak_sentence(), 
      GetArenaForAllocation());
  }
  ::memcpy(&time_stamp_, &from.time_stamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&predefined_action_) -
    reinterpret_cast<char*>(&time_stamp_)) + sizeof(predefined_action_));
  // @@protoc_insertion_point(copy_constructor:ZenboNurseHelperProtobuf.ReportAndCommand)
}

inline void ReportAndCommand::SharedCtor() {
speak_sentence_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  speak_sentence_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&time_stamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&predefined_action_) -
    reinterpret_cast<char*>(&time_stamp_)) + sizeof(predefined_action_));
}

ReportAndCommand::~ReportAndCommand() {
  // @@protoc_insertion_point(destructor:ZenboNurseHelperProtobuf.ReportAndCommand)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ReportAndCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  speak_sentence_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReportAndCommand::ArenaDtor(void* object) {
  ReportAndCommand* _this = reinterpret_cast< ReportAndCommand* >(object);
  (void)_this;
}
void ReportAndCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReportAndCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReportAndCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:ZenboNurseHelperProtobuf.ReportAndCommand)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pose_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    speak_sentence_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&time_stamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&yaw_) -
        reinterpret_cast<char*>(&time_stamp_)) + sizeof(yaw_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&pitch_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&stopmove_) -
        reinterpret_cast<char*>(&pitch_)) + sizeof(stopmove_));
  }
  predefined_action_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReportAndCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 time_stamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_time_stamp(&has_bits);
          time_stamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 pitch_degree = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_pitch_degree(&has_bits);
          pitch_degree_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .ZenboNurseHelperProtobuf.ReportAndCommand.OpenPosePose pose = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pose(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string speak_sentence = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_speak_sentence();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ZenboNurseHelperProtobuf.ReportAndCommand.speak_sentence");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 x = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 y = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 degree = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_degree(&has_bits);
          degree_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 bodyspeed = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_bodyspeed(&has_bits);
          bodyspeed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 yaw = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_yaw(&has_bits);
          yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 pitch = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_pitch(&has_bits);
          pitch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 headspeed = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_headspeed(&has_bits);
          headspeed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 face = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_face(&has_bits);
          face_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 speed = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_speed(&has_bits);
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 volume = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_volume(&has_bits);
          volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 speak_pitch = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_speak_pitch(&has_bits);
          speak_pitch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .ZenboNurseHelperProtobuf.ReportAndCommand.MoveModeEnum movemode = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ZenboNurseHelperProtobuf::ReportAndCommand_MoveModeEnum_IsValid(val))) {
            _internal_set_movemode(static_cast<::ZenboNurseHelperProtobuf::ReportAndCommand_MoveModeEnum>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(16, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int32 stopmove = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_stopmove(&has_bits);
          stopmove_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 predefined_action = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_predefined_action(&has_bits);
          predefined_action_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReportAndCommand::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ZenboNurseHelperProtobuf.ReportAndCommand)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 time_stamp = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_time_stamp(), target);
  }

  // optional int32 pitch_degree = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_pitch_degree(), target);
  }

  // repeated .ZenboNurseHelperProtobuf.ReportAndCommand.OpenPosePose pose = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pose_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_pose(i), target, stream);
  }

  // optional string speak_sentence = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_speak_sentence().data(), static_cast<int>(this->_internal_speak_sentence().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ZenboNurseHelperProtobuf.ReportAndCommand.speak_sentence");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_speak_sentence(), target);
  }

  // optional int32 x = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_x(), target);
  }

  // optional int32 y = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_y(), target);
  }

  // optional int32 degree = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_degree(), target);
  }

  // optional int32 bodyspeed = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_bodyspeed(), target);
  }

  // optional int32 yaw = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_yaw(), target);
  }

  // optional int32 pitch = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_pitch(), target);
  }

  // optional int32 headspeed = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_headspeed(), target);
  }

  // optional int32 face = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_face(), target);
  }

  // optional int32 speed = 13;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_speed(), target);
  }

  // optional int32 volume = 14;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_volume(), target);
  }

  // optional int32 speak_pitch = 15;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_speak_pitch(), target);
  }

  // optional .ZenboNurseHelperProtobuf.ReportAndCommand.MoveModeEnum movemode = 16;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      16, this->_internal_movemode(), target);
  }

  // optional int32 stopmove = 17;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_stopmove(), target);
  }

  // optional int32 predefined_action = 18;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18, this->_internal_predefined_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ZenboNurseHelperProtobuf.ReportAndCommand)
  return target;
}

size_t ReportAndCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ZenboNurseHelperProtobuf.ReportAndCommand)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ZenboNurseHelperProtobuf.ReportAndCommand.OpenPosePose pose = 3;
  total_size += 1UL * this->_internal_pose_size();
  for (const auto& msg : this->pose_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string speak_sentence = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_speak_sentence());
    }

    // optional uint64 time_stamp = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_time_stamp());
    }

    // optional int32 pitch_degree = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_pitch_degree());
    }

    // optional int32 x = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_x());
    }

    // optional int32 y = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_y());
    }

    // optional int32 degree = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_degree());
    }

    // optional int32 bodyspeed = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_bodyspeed());
    }

    // optional int32 yaw = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_yaw());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int32 pitch = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_pitch());
    }

    // optional int32 headspeed = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_headspeed());
    }

    // optional int32 face = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_face());
    }

    // optional int32 speed = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_speed());
    }

    // optional int32 volume = 14;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_volume());
    }

    // optional int32 speak_pitch = 15;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_speak_pitch());
    }

    // optional .ZenboNurseHelperProtobuf.ReportAndCommand.MoveModeEnum movemode = 16;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_movemode());
    }

    // optional int32 stopmove = 17;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_stopmove());
    }

  }
  // optional int32 predefined_action = 18;
  if (cached_has_bits & 0x00010000u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_predefined_action());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReportAndCommand::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReportAndCommand::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReportAndCommand::GetClassData() const { return &_class_data_; }

void ReportAndCommand::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReportAndCommand *>(to)->MergeFrom(
      static_cast<const ReportAndCommand &>(from));
}


void ReportAndCommand::MergeFrom(const ReportAndCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ZenboNurseHelperProtobuf.ReportAndCommand)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  pose_.MergeFrom(from.pose_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_speak_sentence(from._internal_speak_sentence());
    }
    if (cached_has_bits & 0x00000002u) {
      time_stamp_ = from.time_stamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      pitch_degree_ = from.pitch_degree_;
    }
    if (cached_has_bits & 0x00000008u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000010u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000020u) {
      degree_ = from.degree_;
    }
    if (cached_has_bits & 0x00000040u) {
      bodyspeed_ = from.bodyspeed_;
    }
    if (cached_has_bits & 0x00000080u) {
      yaw_ = from.yaw_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      pitch_ = from.pitch_;
    }
    if (cached_has_bits & 0x00000200u) {
      headspeed_ = from.headspeed_;
    }
    if (cached_has_bits & 0x00000400u) {
      face_ = from.face_;
    }
    if (cached_has_bits & 0x00000800u) {
      speed_ = from.speed_;
    }
    if (cached_has_bits & 0x00001000u) {
      volume_ = from.volume_;
    }
    if (cached_has_bits & 0x00002000u) {
      speak_pitch_ = from.speak_pitch_;
    }
    if (cached_has_bits & 0x00004000u) {
      movemode_ = from.movemode_;
    }
    if (cached_has_bits & 0x00008000u) {
      stopmove_ = from.stopmove_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    _internal_set_predefined_action(from._internal_predefined_action());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReportAndCommand::CopyFrom(const ReportAndCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ZenboNurseHelperProtobuf.ReportAndCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportAndCommand::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(pose_))
    return false;
  return true;
}

void ReportAndCommand::InternalSwap(ReportAndCommand* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  pose_.InternalSwap(&other->pose_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &speak_sentence_, lhs_arena,
      &other->speak_sentence_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReportAndCommand, predefined_action_)
      + sizeof(ReportAndCommand::predefined_action_)
      - PROTOBUF_FIELD_OFFSET(ReportAndCommand, time_stamp_)>(
          reinterpret_cast<char*>(&time_stamp_),
          reinterpret_cast<char*>(&other->time_stamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReportAndCommand::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ServerSend_2eproto_getter, &descriptor_table_ServerSend_2eproto_once,
      file_level_metadata_ServerSend_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace ZenboNurseHelperProtobuf
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ZenboNurseHelperProtobuf::ReportAndCommand_OpenPosePose_OpenPoseCoordinate* Arena::CreateMaybeMessage< ::ZenboNurseHelperProtobuf::ReportAndCommand_OpenPosePose_OpenPoseCoordinate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ZenboNurseHelperProtobuf::ReportAndCommand_OpenPosePose_OpenPoseCoordinate >(arena);
}
template<> PROTOBUF_NOINLINE ::ZenboNurseHelperProtobuf::ReportAndCommand_OpenPosePose* Arena::CreateMaybeMessage< ::ZenboNurseHelperProtobuf::ReportAndCommand_OpenPosePose >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ZenboNurseHelperProtobuf::ReportAndCommand_OpenPosePose >(arena);
}
template<> PROTOBUF_NOINLINE ::ZenboNurseHelperProtobuf::ReportAndCommand* Arena::CreateMaybeMessage< ::ZenboNurseHelperProtobuf::ReportAndCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ZenboNurseHelperProtobuf::ReportAndCommand >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
