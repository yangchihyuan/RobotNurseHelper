// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ServerSend.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ServerSend_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ServerSend_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ServerSend_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ServerSend_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ServerSend_2eproto;
namespace ZenboNurseHelperProtobuf {
class ReportAndCommand;
struct ReportAndCommandDefaultTypeInternal;
extern ReportAndCommandDefaultTypeInternal _ReportAndCommand_default_instance_;
class ReportAndCommand_OpenPosePose;
struct ReportAndCommand_OpenPosePoseDefaultTypeInternal;
extern ReportAndCommand_OpenPosePoseDefaultTypeInternal _ReportAndCommand_OpenPosePose_default_instance_;
class ReportAndCommand_OpenPosePose_OpenPoseCoordinate;
struct ReportAndCommand_OpenPosePose_OpenPoseCoordinateDefaultTypeInternal;
extern ReportAndCommand_OpenPosePose_OpenPoseCoordinateDefaultTypeInternal _ReportAndCommand_OpenPosePose_OpenPoseCoordinate_default_instance_;
}  // namespace ZenboNurseHelperProtobuf
PROTOBUF_NAMESPACE_OPEN
template<> ::ZenboNurseHelperProtobuf::ReportAndCommand* Arena::CreateMaybeMessage<::ZenboNurseHelperProtobuf::ReportAndCommand>(Arena*);
template<> ::ZenboNurseHelperProtobuf::ReportAndCommand_OpenPosePose* Arena::CreateMaybeMessage<::ZenboNurseHelperProtobuf::ReportAndCommand_OpenPosePose>(Arena*);
template<> ::ZenboNurseHelperProtobuf::ReportAndCommand_OpenPosePose_OpenPoseCoordinate* Arena::CreateMaybeMessage<::ZenboNurseHelperProtobuf::ReportAndCommand_OpenPosePose_OpenPoseCoordinate>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ZenboNurseHelperProtobuf {

enum ReportAndCommand_MoveModeEnum : int {
  ReportAndCommand_MoveModeEnum_Manual = 0,
  ReportAndCommand_MoveModeEnum_LookForPeople = 1
};
bool ReportAndCommand_MoveModeEnum_IsValid(int value);
constexpr ReportAndCommand_MoveModeEnum ReportAndCommand_MoveModeEnum_MoveModeEnum_MIN = ReportAndCommand_MoveModeEnum_Manual;
constexpr ReportAndCommand_MoveModeEnum ReportAndCommand_MoveModeEnum_MoveModeEnum_MAX = ReportAndCommand_MoveModeEnum_LookForPeople;
constexpr int ReportAndCommand_MoveModeEnum_MoveModeEnum_ARRAYSIZE = ReportAndCommand_MoveModeEnum_MoveModeEnum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReportAndCommand_MoveModeEnum_descriptor();
template<typename T>
inline const std::string& ReportAndCommand_MoveModeEnum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ReportAndCommand_MoveModeEnum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ReportAndCommand_MoveModeEnum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ReportAndCommand_MoveModeEnum_descriptor(), enum_t_value);
}
inline bool ReportAndCommand_MoveModeEnum_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ReportAndCommand_MoveModeEnum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ReportAndCommand_MoveModeEnum>(
    ReportAndCommand_MoveModeEnum_descriptor(), name, value);
}
// ===================================================================

class ReportAndCommand_OpenPosePose_OpenPoseCoordinate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ZenboNurseHelperProtobuf.ReportAndCommand.OpenPosePose.OpenPoseCoordinate) */ {
 public:
  inline ReportAndCommand_OpenPosePose_OpenPoseCoordinate() : ReportAndCommand_OpenPosePose_OpenPoseCoordinate(nullptr) {}
  ~ReportAndCommand_OpenPosePose_OpenPoseCoordinate() override;
  explicit constexpr ReportAndCommand_OpenPosePose_OpenPoseCoordinate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReportAndCommand_OpenPosePose_OpenPoseCoordinate(const ReportAndCommand_OpenPosePose_OpenPoseCoordinate& from);
  ReportAndCommand_OpenPosePose_OpenPoseCoordinate(ReportAndCommand_OpenPosePose_OpenPoseCoordinate&& from) noexcept
    : ReportAndCommand_OpenPosePose_OpenPoseCoordinate() {
    *this = ::std::move(from);
  }

  inline ReportAndCommand_OpenPosePose_OpenPoseCoordinate& operator=(const ReportAndCommand_OpenPosePose_OpenPoseCoordinate& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReportAndCommand_OpenPosePose_OpenPoseCoordinate& operator=(ReportAndCommand_OpenPosePose_OpenPoseCoordinate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReportAndCommand_OpenPosePose_OpenPoseCoordinate& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReportAndCommand_OpenPosePose_OpenPoseCoordinate* internal_default_instance() {
    return reinterpret_cast<const ReportAndCommand_OpenPosePose_OpenPoseCoordinate*>(
               &_ReportAndCommand_OpenPosePose_OpenPoseCoordinate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ReportAndCommand_OpenPosePose_OpenPoseCoordinate& a, ReportAndCommand_OpenPosePose_OpenPoseCoordinate& b) {
    a.Swap(&b);
  }
  inline void Swap(ReportAndCommand_OpenPosePose_OpenPoseCoordinate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReportAndCommand_OpenPosePose_OpenPoseCoordinate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReportAndCommand_OpenPosePose_OpenPoseCoordinate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReportAndCommand_OpenPosePose_OpenPoseCoordinate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReportAndCommand_OpenPosePose_OpenPoseCoordinate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReportAndCommand_OpenPosePose_OpenPoseCoordinate& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReportAndCommand_OpenPosePose_OpenPoseCoordinate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ZenboNurseHelperProtobuf.ReportAndCommand.OpenPosePose.OpenPoseCoordinate";
  }
  protected:
  explicit ReportAndCommand_OpenPosePose_OpenPoseCoordinate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kValidFieldNumber = 3,
  };
  // required int64 x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  int64_t x() const;
  void set_x(int64_t value);
  private:
  int64_t _internal_x() const;
  void _internal_set_x(int64_t value);
  public:

  // required int64 y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  int64_t y() const;
  void set_y(int64_t value);
  private:
  int64_t _internal_y() const;
  void _internal_set_y(int64_t value);
  public:

  // required int64 valid = 3;
  bool has_valid() const;
  private:
  bool _internal_has_valid() const;
  public:
  void clear_valid();
  int64_t valid() const;
  void set_valid(int64_t value);
  private:
  int64_t _internal_valid() const;
  void _internal_set_valid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:ZenboNurseHelperProtobuf.ReportAndCommand.OpenPosePose.OpenPoseCoordinate)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int64_t x_;
  int64_t y_;
  int64_t valid_;
  friend struct ::TableStruct_ServerSend_2eproto;
};
// -------------------------------------------------------------------

class ReportAndCommand_OpenPosePose final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ZenboNurseHelperProtobuf.ReportAndCommand.OpenPosePose) */ {
 public:
  inline ReportAndCommand_OpenPosePose() : ReportAndCommand_OpenPosePose(nullptr) {}
  ~ReportAndCommand_OpenPosePose() override;
  explicit constexpr ReportAndCommand_OpenPosePose(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReportAndCommand_OpenPosePose(const ReportAndCommand_OpenPosePose& from);
  ReportAndCommand_OpenPosePose(ReportAndCommand_OpenPosePose&& from) noexcept
    : ReportAndCommand_OpenPosePose() {
    *this = ::std::move(from);
  }

  inline ReportAndCommand_OpenPosePose& operator=(const ReportAndCommand_OpenPosePose& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReportAndCommand_OpenPosePose& operator=(ReportAndCommand_OpenPosePose&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReportAndCommand_OpenPosePose& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReportAndCommand_OpenPosePose* internal_default_instance() {
    return reinterpret_cast<const ReportAndCommand_OpenPosePose*>(
               &_ReportAndCommand_OpenPosePose_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ReportAndCommand_OpenPosePose& a, ReportAndCommand_OpenPosePose& b) {
    a.Swap(&b);
  }
  inline void Swap(ReportAndCommand_OpenPosePose* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReportAndCommand_OpenPosePose* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReportAndCommand_OpenPosePose* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReportAndCommand_OpenPosePose>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReportAndCommand_OpenPosePose& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReportAndCommand_OpenPosePose& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReportAndCommand_OpenPosePose* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ZenboNurseHelperProtobuf.ReportAndCommand.OpenPosePose";
  }
  protected:
  explicit ReportAndCommand_OpenPosePose(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ReportAndCommand_OpenPosePose_OpenPoseCoordinate OpenPoseCoordinate;

  // accessors -------------------------------------------------------

  enum : int {
    kCoordFieldNumber = 2,
    kScoreFieldNumber = 1,
  };
  // repeated .ZenboNurseHelperProtobuf.ReportAndCommand.OpenPosePose.OpenPoseCoordinate coord = 2;
  int coord_size() const;
  private:
  int _internal_coord_size() const;
  public:
  void clear_coord();
  ::ZenboNurseHelperProtobuf::ReportAndCommand_OpenPosePose_OpenPoseCoordinate* mutable_coord(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ZenboNurseHelperProtobuf::ReportAndCommand_OpenPosePose_OpenPoseCoordinate >*
      mutable_coord();
  private:
  const ::ZenboNurseHelperProtobuf::ReportAndCommand_OpenPosePose_OpenPoseCoordinate& _internal_coord(int index) const;
  ::ZenboNurseHelperProtobuf::ReportAndCommand_OpenPosePose_OpenPoseCoordinate* _internal_add_coord();
  public:
  const ::ZenboNurseHelperProtobuf::ReportAndCommand_OpenPosePose_OpenPoseCoordinate& coord(int index) const;
  ::ZenboNurseHelperProtobuf::ReportAndCommand_OpenPosePose_OpenPoseCoordinate* add_coord();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ZenboNurseHelperProtobuf::ReportAndCommand_OpenPosePose_OpenPoseCoordinate >&
      coord() const;

  // required int64 score = 1;
  bool has_score() const;
  private:
  bool _internal_has_score() const;
  public:
  void clear_score();
  int64_t score() const;
  void set_score(int64_t value);
  private:
  int64_t _internal_score() const;
  void _internal_set_score(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:ZenboNurseHelperProtobuf.ReportAndCommand.OpenPosePose)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ZenboNurseHelperProtobuf::ReportAndCommand_OpenPosePose_OpenPoseCoordinate > coord_;
  int64_t score_;
  friend struct ::TableStruct_ServerSend_2eproto;
};
// -------------------------------------------------------------------

class ReportAndCommand final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ZenboNurseHelperProtobuf.ReportAndCommand) */ {
 public:
  inline ReportAndCommand() : ReportAndCommand(nullptr) {}
  ~ReportAndCommand() override;
  explicit constexpr ReportAndCommand(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReportAndCommand(const ReportAndCommand& from);
  ReportAndCommand(ReportAndCommand&& from) noexcept
    : ReportAndCommand() {
    *this = ::std::move(from);
  }

  inline ReportAndCommand& operator=(const ReportAndCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReportAndCommand& operator=(ReportAndCommand&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReportAndCommand& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReportAndCommand* internal_default_instance() {
    return reinterpret_cast<const ReportAndCommand*>(
               &_ReportAndCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ReportAndCommand& a, ReportAndCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(ReportAndCommand* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReportAndCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReportAndCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReportAndCommand>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReportAndCommand& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReportAndCommand& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReportAndCommand* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ZenboNurseHelperProtobuf.ReportAndCommand";
  }
  protected:
  explicit ReportAndCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ReportAndCommand_OpenPosePose OpenPosePose;

  typedef ReportAndCommand_MoveModeEnum MoveModeEnum;
  static constexpr MoveModeEnum Manual =
    ReportAndCommand_MoveModeEnum_Manual;
  static constexpr MoveModeEnum LookForPeople =
    ReportAndCommand_MoveModeEnum_LookForPeople;
  static inline bool MoveModeEnum_IsValid(int value) {
    return ReportAndCommand_MoveModeEnum_IsValid(value);
  }
  static constexpr MoveModeEnum MoveModeEnum_MIN =
    ReportAndCommand_MoveModeEnum_MoveModeEnum_MIN;
  static constexpr MoveModeEnum MoveModeEnum_MAX =
    ReportAndCommand_MoveModeEnum_MoveModeEnum_MAX;
  static constexpr int MoveModeEnum_ARRAYSIZE =
    ReportAndCommand_MoveModeEnum_MoveModeEnum_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MoveModeEnum_descriptor() {
    return ReportAndCommand_MoveModeEnum_descriptor();
  }
  template<typename T>
  static inline const std::string& MoveModeEnum_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MoveModeEnum>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MoveModeEnum_Name.");
    return ReportAndCommand_MoveModeEnum_Name(enum_t_value);
  }
  static inline bool MoveModeEnum_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      MoveModeEnum* value) {
    return ReportAndCommand_MoveModeEnum_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPoseFieldNumber = 3,
    kSpeakSentenceFieldNumber = 4,
    kTimeStampFieldNumber = 1,
    kPitchDegreeFieldNumber = 2,
    kXFieldNumber = 5,
    kYFieldNumber = 6,
    kDegreeFieldNumber = 7,
    kBodyspeedFieldNumber = 8,
    kYawFieldNumber = 9,
    kPitchFieldNumber = 10,
    kHeadspeedFieldNumber = 11,
    kFaceFieldNumber = 12,
    kSpeedFieldNumber = 13,
    kVolumeFieldNumber = 14,
    kSpeakPitchFieldNumber = 15,
    kMovemodeFieldNumber = 16,
    kStopmoveFieldNumber = 17,
    kPredefinedActionFieldNumber = 18,
  };
  // repeated .ZenboNurseHelperProtobuf.ReportAndCommand.OpenPosePose pose = 3;
  int pose_size() const;
  private:
  int _internal_pose_size() const;
  public:
  void clear_pose();
  ::ZenboNurseHelperProtobuf::ReportAndCommand_OpenPosePose* mutable_pose(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ZenboNurseHelperProtobuf::ReportAndCommand_OpenPosePose >*
      mutable_pose();
  private:
  const ::ZenboNurseHelperProtobuf::ReportAndCommand_OpenPosePose& _internal_pose(int index) const;
  ::ZenboNurseHelperProtobuf::ReportAndCommand_OpenPosePose* _internal_add_pose();
  public:
  const ::ZenboNurseHelperProtobuf::ReportAndCommand_OpenPosePose& pose(int index) const;
  ::ZenboNurseHelperProtobuf::ReportAndCommand_OpenPosePose* add_pose();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ZenboNurseHelperProtobuf::ReportAndCommand_OpenPosePose >&
      pose() const;

  // optional string speak_sentence = 4;
  bool has_speak_sentence() const;
  private:
  bool _internal_has_speak_sentence() const;
  public:
  void clear_speak_sentence();
  const std::string& speak_sentence() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_speak_sentence(ArgT0&& arg0, ArgT... args);
  std::string* mutable_speak_sentence();
  PROTOBUF_NODISCARD std::string* release_speak_sentence();
  void set_allocated_speak_sentence(std::string* speak_sentence);
  private:
  const std::string& _internal_speak_sentence() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_speak_sentence(const std::string& value);
  std::string* _internal_mutable_speak_sentence();
  public:

  // optional uint64 time_stamp = 1;
  bool has_time_stamp() const;
  private:
  bool _internal_has_time_stamp() const;
  public:
  void clear_time_stamp();
  uint64_t time_stamp() const;
  void set_time_stamp(uint64_t value);
  private:
  uint64_t _internal_time_stamp() const;
  void _internal_set_time_stamp(uint64_t value);
  public:

  // optional int32 pitch_degree = 2;
  bool has_pitch_degree() const;
  private:
  bool _internal_has_pitch_degree() const;
  public:
  void clear_pitch_degree();
  int32_t pitch_degree() const;
  void set_pitch_degree(int32_t value);
  private:
  int32_t _internal_pitch_degree() const;
  void _internal_set_pitch_degree(int32_t value);
  public:

  // optional int32 x = 5;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // optional int32 y = 6;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  int32_t y() const;
  void set_y(int32_t value);
  private:
  int32_t _internal_y() const;
  void _internal_set_y(int32_t value);
  public:

  // optional int32 degree = 7;
  bool has_degree() const;
  private:
  bool _internal_has_degree() const;
  public:
  void clear_degree();
  int32_t degree() const;
  void set_degree(int32_t value);
  private:
  int32_t _internal_degree() const;
  void _internal_set_degree(int32_t value);
  public:

  // optional int32 bodyspeed = 8;
  bool has_bodyspeed() const;
  private:
  bool _internal_has_bodyspeed() const;
  public:
  void clear_bodyspeed();
  int32_t bodyspeed() const;
  void set_bodyspeed(int32_t value);
  private:
  int32_t _internal_bodyspeed() const;
  void _internal_set_bodyspeed(int32_t value);
  public:

  // optional int32 yaw = 9;
  bool has_yaw() const;
  private:
  bool _internal_has_yaw() const;
  public:
  void clear_yaw();
  int32_t yaw() const;
  void set_yaw(int32_t value);
  private:
  int32_t _internal_yaw() const;
  void _internal_set_yaw(int32_t value);
  public:

  // optional int32 pitch = 10;
  bool has_pitch() const;
  private:
  bool _internal_has_pitch() const;
  public:
  void clear_pitch();
  int32_t pitch() const;
  void set_pitch(int32_t value);
  private:
  int32_t _internal_pitch() const;
  void _internal_set_pitch(int32_t value);
  public:

  // optional int32 headspeed = 11;
  bool has_headspeed() const;
  private:
  bool _internal_has_headspeed() const;
  public:
  void clear_headspeed();
  int32_t headspeed() const;
  void set_headspeed(int32_t value);
  private:
  int32_t _internal_headspeed() const;
  void _internal_set_headspeed(int32_t value);
  public:

  // optional int32 face = 12;
  bool has_face() const;
  private:
  bool _internal_has_face() const;
  public:
  void clear_face();
  int32_t face() const;
  void set_face(int32_t value);
  private:
  int32_t _internal_face() const;
  void _internal_set_face(int32_t value);
  public:

  // optional int32 speed = 13;
  bool has_speed() const;
  private:
  bool _internal_has_speed() const;
  public:
  void clear_speed();
  int32_t speed() const;
  void set_speed(int32_t value);
  private:
  int32_t _internal_speed() const;
  void _internal_set_speed(int32_t value);
  public:

  // optional int32 volume = 14;
  bool has_volume() const;
  private:
  bool _internal_has_volume() const;
  public:
  void clear_volume();
  int32_t volume() const;
  void set_volume(int32_t value);
  private:
  int32_t _internal_volume() const;
  void _internal_set_volume(int32_t value);
  public:

  // optional int32 speak_pitch = 15;
  bool has_speak_pitch() const;
  private:
  bool _internal_has_speak_pitch() const;
  public:
  void clear_speak_pitch();
  int32_t speak_pitch() const;
  void set_speak_pitch(int32_t value);
  private:
  int32_t _internal_speak_pitch() const;
  void _internal_set_speak_pitch(int32_t value);
  public:

  // optional .ZenboNurseHelperProtobuf.ReportAndCommand.MoveModeEnum movemode = 16;
  bool has_movemode() const;
  private:
  bool _internal_has_movemode() const;
  public:
  void clear_movemode();
  ::ZenboNurseHelperProtobuf::ReportAndCommand_MoveModeEnum movemode() const;
  void set_movemode(::ZenboNurseHelperProtobuf::ReportAndCommand_MoveModeEnum value);
  private:
  ::ZenboNurseHelperProtobuf::ReportAndCommand_MoveModeEnum _internal_movemode() const;
  void _internal_set_movemode(::ZenboNurseHelperProtobuf::ReportAndCommand_MoveModeEnum value);
  public:

  // optional int32 stopmove = 17;
  bool has_stopmove() const;
  private:
  bool _internal_has_stopmove() const;
  public:
  void clear_stopmove();
  int32_t stopmove() const;
  void set_stopmove(int32_t value);
  private:
  int32_t _internal_stopmove() const;
  void _internal_set_stopmove(int32_t value);
  public:

  // optional int32 predefined_action = 18;
  bool has_predefined_action() const;
  private:
  bool _internal_has_predefined_action() const;
  public:
  void clear_predefined_action();
  int32_t predefined_action() const;
  void set_predefined_action(int32_t value);
  private:
  int32_t _internal_predefined_action() const;
  void _internal_set_predefined_action(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ZenboNurseHelperProtobuf.ReportAndCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ZenboNurseHelperProtobuf::ReportAndCommand_OpenPosePose > pose_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr speak_sentence_;
  uint64_t time_stamp_;
  int32_t pitch_degree_;
  int32_t x_;
  int32_t y_;
  int32_t degree_;
  int32_t bodyspeed_;
  int32_t yaw_;
  int32_t pitch_;
  int32_t headspeed_;
  int32_t face_;
  int32_t speed_;
  int32_t volume_;
  int32_t speak_pitch_;
  int movemode_;
  int32_t stopmove_;
  int32_t predefined_action_;
  friend struct ::TableStruct_ServerSend_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ReportAndCommand_OpenPosePose_OpenPoseCoordinate

// required int64 x = 1;
inline bool ReportAndCommand_OpenPosePose_OpenPoseCoordinate::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ReportAndCommand_OpenPosePose_OpenPoseCoordinate::has_x() const {
  return _internal_has_x();
}
inline void ReportAndCommand_OpenPosePose_OpenPoseCoordinate::clear_x() {
  x_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline int64_t ReportAndCommand_OpenPosePose_OpenPoseCoordinate::_internal_x() const {
  return x_;
}
inline int64_t ReportAndCommand_OpenPosePose_OpenPoseCoordinate::x() const {
  // @@protoc_insertion_point(field_get:ZenboNurseHelperProtobuf.ReportAndCommand.OpenPosePose.OpenPoseCoordinate.x)
  return _internal_x();
}
inline void ReportAndCommand_OpenPosePose_OpenPoseCoordinate::_internal_set_x(int64_t value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void ReportAndCommand_OpenPosePose_OpenPoseCoordinate::set_x(int64_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:ZenboNurseHelperProtobuf.ReportAndCommand.OpenPosePose.OpenPoseCoordinate.x)
}

// required int64 y = 2;
inline bool ReportAndCommand_OpenPosePose_OpenPoseCoordinate::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ReportAndCommand_OpenPosePose_OpenPoseCoordinate::has_y() const {
  return _internal_has_y();
}
inline void ReportAndCommand_OpenPosePose_OpenPoseCoordinate::clear_y() {
  y_ = int64_t{0};
  _has_bits_[0] &= ~0x00000002u;
}
inline int64_t ReportAndCommand_OpenPosePose_OpenPoseCoordinate::_internal_y() const {
  return y_;
}
inline int64_t ReportAndCommand_OpenPosePose_OpenPoseCoordinate::y() const {
  // @@protoc_insertion_point(field_get:ZenboNurseHelperProtobuf.ReportAndCommand.OpenPosePose.OpenPoseCoordinate.y)
  return _internal_y();
}
inline void ReportAndCommand_OpenPosePose_OpenPoseCoordinate::_internal_set_y(int64_t value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void ReportAndCommand_OpenPosePose_OpenPoseCoordinate::set_y(int64_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:ZenboNurseHelperProtobuf.ReportAndCommand.OpenPosePose.OpenPoseCoordinate.y)
}

// required int64 valid = 3;
inline bool ReportAndCommand_OpenPosePose_OpenPoseCoordinate::_internal_has_valid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ReportAndCommand_OpenPosePose_OpenPoseCoordinate::has_valid() const {
  return _internal_has_valid();
}
inline void ReportAndCommand_OpenPosePose_OpenPoseCoordinate::clear_valid() {
  valid_ = int64_t{0};
  _has_bits_[0] &= ~0x00000004u;
}
inline int64_t ReportAndCommand_OpenPosePose_OpenPoseCoordinate::_internal_valid() const {
  return valid_;
}
inline int64_t ReportAndCommand_OpenPosePose_OpenPoseCoordinate::valid() const {
  // @@protoc_insertion_point(field_get:ZenboNurseHelperProtobuf.ReportAndCommand.OpenPosePose.OpenPoseCoordinate.valid)
  return _internal_valid();
}
inline void ReportAndCommand_OpenPosePose_OpenPoseCoordinate::_internal_set_valid(int64_t value) {
  _has_bits_[0] |= 0x00000004u;
  valid_ = value;
}
inline void ReportAndCommand_OpenPosePose_OpenPoseCoordinate::set_valid(int64_t value) {
  _internal_set_valid(value);
  // @@protoc_insertion_point(field_set:ZenboNurseHelperProtobuf.ReportAndCommand.OpenPosePose.OpenPoseCoordinate.valid)
}

// -------------------------------------------------------------------

// ReportAndCommand_OpenPosePose

// required int64 score = 1;
inline bool ReportAndCommand_OpenPosePose::_internal_has_score() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ReportAndCommand_OpenPosePose::has_score() const {
  return _internal_has_score();
}
inline void ReportAndCommand_OpenPosePose::clear_score() {
  score_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline int64_t ReportAndCommand_OpenPosePose::_internal_score() const {
  return score_;
}
inline int64_t ReportAndCommand_OpenPosePose::score() const {
  // @@protoc_insertion_point(field_get:ZenboNurseHelperProtobuf.ReportAndCommand.OpenPosePose.score)
  return _internal_score();
}
inline void ReportAndCommand_OpenPosePose::_internal_set_score(int64_t value) {
  _has_bits_[0] |= 0x00000001u;
  score_ = value;
}
inline void ReportAndCommand_OpenPosePose::set_score(int64_t value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:ZenboNurseHelperProtobuf.ReportAndCommand.OpenPosePose.score)
}

// repeated .ZenboNurseHelperProtobuf.ReportAndCommand.OpenPosePose.OpenPoseCoordinate coord = 2;
inline int ReportAndCommand_OpenPosePose::_internal_coord_size() const {
  return coord_.size();
}
inline int ReportAndCommand_OpenPosePose::coord_size() const {
  return _internal_coord_size();
}
inline void ReportAndCommand_OpenPosePose::clear_coord() {
  coord_.Clear();
}
inline ::ZenboNurseHelperProtobuf::ReportAndCommand_OpenPosePose_OpenPoseCoordinate* ReportAndCommand_OpenPosePose::mutable_coord(int index) {
  // @@protoc_insertion_point(field_mutable:ZenboNurseHelperProtobuf.ReportAndCommand.OpenPosePose.coord)
  return coord_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ZenboNurseHelperProtobuf::ReportAndCommand_OpenPosePose_OpenPoseCoordinate >*
ReportAndCommand_OpenPosePose::mutable_coord() {
  // @@protoc_insertion_point(field_mutable_list:ZenboNurseHelperProtobuf.ReportAndCommand.OpenPosePose.coord)
  return &coord_;
}
inline const ::ZenboNurseHelperProtobuf::ReportAndCommand_OpenPosePose_OpenPoseCoordinate& ReportAndCommand_OpenPosePose::_internal_coord(int index) const {
  return coord_.Get(index);
}
inline const ::ZenboNurseHelperProtobuf::ReportAndCommand_OpenPosePose_OpenPoseCoordinate& ReportAndCommand_OpenPosePose::coord(int index) const {
  // @@protoc_insertion_point(field_get:ZenboNurseHelperProtobuf.ReportAndCommand.OpenPosePose.coord)
  return _internal_coord(index);
}
inline ::ZenboNurseHelperProtobuf::ReportAndCommand_OpenPosePose_OpenPoseCoordinate* ReportAndCommand_OpenPosePose::_internal_add_coord() {
  return coord_.Add();
}
inline ::ZenboNurseHelperProtobuf::ReportAndCommand_OpenPosePose_OpenPoseCoordinate* ReportAndCommand_OpenPosePose::add_coord() {
  ::ZenboNurseHelperProtobuf::ReportAndCommand_OpenPosePose_OpenPoseCoordinate* _add = _internal_add_coord();
  // @@protoc_insertion_point(field_add:ZenboNurseHelperProtobuf.ReportAndCommand.OpenPosePose.coord)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ZenboNurseHelperProtobuf::ReportAndCommand_OpenPosePose_OpenPoseCoordinate >&
ReportAndCommand_OpenPosePose::coord() const {
  // @@protoc_insertion_point(field_list:ZenboNurseHelperProtobuf.ReportAndCommand.OpenPosePose.coord)
  return coord_;
}

// -------------------------------------------------------------------

// ReportAndCommand

// optional uint64 time_stamp = 1;
inline bool ReportAndCommand::_internal_has_time_stamp() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ReportAndCommand::has_time_stamp() const {
  return _internal_has_time_stamp();
}
inline void ReportAndCommand::clear_time_stamp() {
  time_stamp_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t ReportAndCommand::_internal_time_stamp() const {
  return time_stamp_;
}
inline uint64_t ReportAndCommand::time_stamp() const {
  // @@protoc_insertion_point(field_get:ZenboNurseHelperProtobuf.ReportAndCommand.time_stamp)
  return _internal_time_stamp();
}
inline void ReportAndCommand::_internal_set_time_stamp(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  time_stamp_ = value;
}
inline void ReportAndCommand::set_time_stamp(uint64_t value) {
  _internal_set_time_stamp(value);
  // @@protoc_insertion_point(field_set:ZenboNurseHelperProtobuf.ReportAndCommand.time_stamp)
}

// optional int32 pitch_degree = 2;
inline bool ReportAndCommand::_internal_has_pitch_degree() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ReportAndCommand::has_pitch_degree() const {
  return _internal_has_pitch_degree();
}
inline void ReportAndCommand::clear_pitch_degree() {
  pitch_degree_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t ReportAndCommand::_internal_pitch_degree() const {
  return pitch_degree_;
}
inline int32_t ReportAndCommand::pitch_degree() const {
  // @@protoc_insertion_point(field_get:ZenboNurseHelperProtobuf.ReportAndCommand.pitch_degree)
  return _internal_pitch_degree();
}
inline void ReportAndCommand::_internal_set_pitch_degree(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  pitch_degree_ = value;
}
inline void ReportAndCommand::set_pitch_degree(int32_t value) {
  _internal_set_pitch_degree(value);
  // @@protoc_insertion_point(field_set:ZenboNurseHelperProtobuf.ReportAndCommand.pitch_degree)
}

// repeated .ZenboNurseHelperProtobuf.ReportAndCommand.OpenPosePose pose = 3;
inline int ReportAndCommand::_internal_pose_size() const {
  return pose_.size();
}
inline int ReportAndCommand::pose_size() const {
  return _internal_pose_size();
}
inline void ReportAndCommand::clear_pose() {
  pose_.Clear();
}
inline ::ZenboNurseHelperProtobuf::ReportAndCommand_OpenPosePose* ReportAndCommand::mutable_pose(int index) {
  // @@protoc_insertion_point(field_mutable:ZenboNurseHelperProtobuf.ReportAndCommand.pose)
  return pose_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ZenboNurseHelperProtobuf::ReportAndCommand_OpenPosePose >*
ReportAndCommand::mutable_pose() {
  // @@protoc_insertion_point(field_mutable_list:ZenboNurseHelperProtobuf.ReportAndCommand.pose)
  return &pose_;
}
inline const ::ZenboNurseHelperProtobuf::ReportAndCommand_OpenPosePose& ReportAndCommand::_internal_pose(int index) const {
  return pose_.Get(index);
}
inline const ::ZenboNurseHelperProtobuf::ReportAndCommand_OpenPosePose& ReportAndCommand::pose(int index) const {
  // @@protoc_insertion_point(field_get:ZenboNurseHelperProtobuf.ReportAndCommand.pose)
  return _internal_pose(index);
}
inline ::ZenboNurseHelperProtobuf::ReportAndCommand_OpenPosePose* ReportAndCommand::_internal_add_pose() {
  return pose_.Add();
}
inline ::ZenboNurseHelperProtobuf::ReportAndCommand_OpenPosePose* ReportAndCommand::add_pose() {
  ::ZenboNurseHelperProtobuf::ReportAndCommand_OpenPosePose* _add = _internal_add_pose();
  // @@protoc_insertion_point(field_add:ZenboNurseHelperProtobuf.ReportAndCommand.pose)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ZenboNurseHelperProtobuf::ReportAndCommand_OpenPosePose >&
ReportAndCommand::pose() const {
  // @@protoc_insertion_point(field_list:ZenboNurseHelperProtobuf.ReportAndCommand.pose)
  return pose_;
}

// optional string speak_sentence = 4;
inline bool ReportAndCommand::_internal_has_speak_sentence() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ReportAndCommand::has_speak_sentence() const {
  return _internal_has_speak_sentence();
}
inline void ReportAndCommand::clear_speak_sentence() {
  speak_sentence_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ReportAndCommand::speak_sentence() const {
  // @@protoc_insertion_point(field_get:ZenboNurseHelperProtobuf.ReportAndCommand.speak_sentence)
  return _internal_speak_sentence();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReportAndCommand::set_speak_sentence(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 speak_sentence_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ZenboNurseHelperProtobuf.ReportAndCommand.speak_sentence)
}
inline std::string* ReportAndCommand::mutable_speak_sentence() {
  std::string* _s = _internal_mutable_speak_sentence();
  // @@protoc_insertion_point(field_mutable:ZenboNurseHelperProtobuf.ReportAndCommand.speak_sentence)
  return _s;
}
inline const std::string& ReportAndCommand::_internal_speak_sentence() const {
  return speak_sentence_.Get();
}
inline void ReportAndCommand::_internal_set_speak_sentence(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  speak_sentence_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReportAndCommand::_internal_mutable_speak_sentence() {
  _has_bits_[0] |= 0x00000001u;
  return speak_sentence_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReportAndCommand::release_speak_sentence() {
  // @@protoc_insertion_point(field_release:ZenboNurseHelperProtobuf.ReportAndCommand.speak_sentence)
  if (!_internal_has_speak_sentence()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = speak_sentence_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (speak_sentence_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    speak_sentence_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ReportAndCommand::set_allocated_speak_sentence(std::string* speak_sentence) {
  if (speak_sentence != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  speak_sentence_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), speak_sentence,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (speak_sentence_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    speak_sentence_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ZenboNurseHelperProtobuf.ReportAndCommand.speak_sentence)
}

// optional int32 x = 5;
inline bool ReportAndCommand::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ReportAndCommand::has_x() const {
  return _internal_has_x();
}
inline void ReportAndCommand::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline int32_t ReportAndCommand::_internal_x() const {
  return x_;
}
inline int32_t ReportAndCommand::x() const {
  // @@protoc_insertion_point(field_get:ZenboNurseHelperProtobuf.ReportAndCommand.x)
  return _internal_x();
}
inline void ReportAndCommand::_internal_set_x(int32_t value) {
  _has_bits_[0] |= 0x00000008u;
  x_ = value;
}
inline void ReportAndCommand::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:ZenboNurseHelperProtobuf.ReportAndCommand.x)
}

// optional int32 y = 6;
inline bool ReportAndCommand::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ReportAndCommand::has_y() const {
  return _internal_has_y();
}
inline void ReportAndCommand::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline int32_t ReportAndCommand::_internal_y() const {
  return y_;
}
inline int32_t ReportAndCommand::y() const {
  // @@protoc_insertion_point(field_get:ZenboNurseHelperProtobuf.ReportAndCommand.y)
  return _internal_y();
}
inline void ReportAndCommand::_internal_set_y(int32_t value) {
  _has_bits_[0] |= 0x00000010u;
  y_ = value;
}
inline void ReportAndCommand::set_y(int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:ZenboNurseHelperProtobuf.ReportAndCommand.y)
}

// optional int32 degree = 7;
inline bool ReportAndCommand::_internal_has_degree() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ReportAndCommand::has_degree() const {
  return _internal_has_degree();
}
inline void ReportAndCommand::clear_degree() {
  degree_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline int32_t ReportAndCommand::_internal_degree() const {
  return degree_;
}
inline int32_t ReportAndCommand::degree() const {
  // @@protoc_insertion_point(field_get:ZenboNurseHelperProtobuf.ReportAndCommand.degree)
  return _internal_degree();
}
inline void ReportAndCommand::_internal_set_degree(int32_t value) {
  _has_bits_[0] |= 0x00000020u;
  degree_ = value;
}
inline void ReportAndCommand::set_degree(int32_t value) {
  _internal_set_degree(value);
  // @@protoc_insertion_point(field_set:ZenboNurseHelperProtobuf.ReportAndCommand.degree)
}

// optional int32 bodyspeed = 8;
inline bool ReportAndCommand::_internal_has_bodyspeed() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ReportAndCommand::has_bodyspeed() const {
  return _internal_has_bodyspeed();
}
inline void ReportAndCommand::clear_bodyspeed() {
  bodyspeed_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline int32_t ReportAndCommand::_internal_bodyspeed() const {
  return bodyspeed_;
}
inline int32_t ReportAndCommand::bodyspeed() const {
  // @@protoc_insertion_point(field_get:ZenboNurseHelperProtobuf.ReportAndCommand.bodyspeed)
  return _internal_bodyspeed();
}
inline void ReportAndCommand::_internal_set_bodyspeed(int32_t value) {
  _has_bits_[0] |= 0x00000040u;
  bodyspeed_ = value;
}
inline void ReportAndCommand::set_bodyspeed(int32_t value) {
  _internal_set_bodyspeed(value);
  // @@protoc_insertion_point(field_set:ZenboNurseHelperProtobuf.ReportAndCommand.bodyspeed)
}

// optional int32 yaw = 9;
inline bool ReportAndCommand::_internal_has_yaw() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ReportAndCommand::has_yaw() const {
  return _internal_has_yaw();
}
inline void ReportAndCommand::clear_yaw() {
  yaw_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline int32_t ReportAndCommand::_internal_yaw() const {
  return yaw_;
}
inline int32_t ReportAndCommand::yaw() const {
  // @@protoc_insertion_point(field_get:ZenboNurseHelperProtobuf.ReportAndCommand.yaw)
  return _internal_yaw();
}
inline void ReportAndCommand::_internal_set_yaw(int32_t value) {
  _has_bits_[0] |= 0x00000080u;
  yaw_ = value;
}
inline void ReportAndCommand::set_yaw(int32_t value) {
  _internal_set_yaw(value);
  // @@protoc_insertion_point(field_set:ZenboNurseHelperProtobuf.ReportAndCommand.yaw)
}

// optional int32 pitch = 10;
inline bool ReportAndCommand::_internal_has_pitch() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ReportAndCommand::has_pitch() const {
  return _internal_has_pitch();
}
inline void ReportAndCommand::clear_pitch() {
  pitch_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline int32_t ReportAndCommand::_internal_pitch() const {
  return pitch_;
}
inline int32_t ReportAndCommand::pitch() const {
  // @@protoc_insertion_point(field_get:ZenboNurseHelperProtobuf.ReportAndCommand.pitch)
  return _internal_pitch();
}
inline void ReportAndCommand::_internal_set_pitch(int32_t value) {
  _has_bits_[0] |= 0x00000100u;
  pitch_ = value;
}
inline void ReportAndCommand::set_pitch(int32_t value) {
  _internal_set_pitch(value);
  // @@protoc_insertion_point(field_set:ZenboNurseHelperProtobuf.ReportAndCommand.pitch)
}

// optional int32 headspeed = 11;
inline bool ReportAndCommand::_internal_has_headspeed() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ReportAndCommand::has_headspeed() const {
  return _internal_has_headspeed();
}
inline void ReportAndCommand::clear_headspeed() {
  headspeed_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline int32_t ReportAndCommand::_internal_headspeed() const {
  return headspeed_;
}
inline int32_t ReportAndCommand::headspeed() const {
  // @@protoc_insertion_point(field_get:ZenboNurseHelperProtobuf.ReportAndCommand.headspeed)
  return _internal_headspeed();
}
inline void ReportAndCommand::_internal_set_headspeed(int32_t value) {
  _has_bits_[0] |= 0x00000200u;
  headspeed_ = value;
}
inline void ReportAndCommand::set_headspeed(int32_t value) {
  _internal_set_headspeed(value);
  // @@protoc_insertion_point(field_set:ZenboNurseHelperProtobuf.ReportAndCommand.headspeed)
}

// optional int32 face = 12;
inline bool ReportAndCommand::_internal_has_face() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool ReportAndCommand::has_face() const {
  return _internal_has_face();
}
inline void ReportAndCommand::clear_face() {
  face_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline int32_t ReportAndCommand::_internal_face() const {
  return face_;
}
inline int32_t ReportAndCommand::face() const {
  // @@protoc_insertion_point(field_get:ZenboNurseHelperProtobuf.ReportAndCommand.face)
  return _internal_face();
}
inline void ReportAndCommand::_internal_set_face(int32_t value) {
  _has_bits_[0] |= 0x00000400u;
  face_ = value;
}
inline void ReportAndCommand::set_face(int32_t value) {
  _internal_set_face(value);
  // @@protoc_insertion_point(field_set:ZenboNurseHelperProtobuf.ReportAndCommand.face)
}

// optional int32 speed = 13;
inline bool ReportAndCommand::_internal_has_speed() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool ReportAndCommand::has_speed() const {
  return _internal_has_speed();
}
inline void ReportAndCommand::clear_speed() {
  speed_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline int32_t ReportAndCommand::_internal_speed() const {
  return speed_;
}
inline int32_t ReportAndCommand::speed() const {
  // @@protoc_insertion_point(field_get:ZenboNurseHelperProtobuf.ReportAndCommand.speed)
  return _internal_speed();
}
inline void ReportAndCommand::_internal_set_speed(int32_t value) {
  _has_bits_[0] |= 0x00000800u;
  speed_ = value;
}
inline void ReportAndCommand::set_speed(int32_t value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:ZenboNurseHelperProtobuf.ReportAndCommand.speed)
}

// optional int32 volume = 14;
inline bool ReportAndCommand::_internal_has_volume() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool ReportAndCommand::has_volume() const {
  return _internal_has_volume();
}
inline void ReportAndCommand::clear_volume() {
  volume_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline int32_t ReportAndCommand::_internal_volume() const {
  return volume_;
}
inline int32_t ReportAndCommand::volume() const {
  // @@protoc_insertion_point(field_get:ZenboNurseHelperProtobuf.ReportAndCommand.volume)
  return _internal_volume();
}
inline void ReportAndCommand::_internal_set_volume(int32_t value) {
  _has_bits_[0] |= 0x00001000u;
  volume_ = value;
}
inline void ReportAndCommand::set_volume(int32_t value) {
  _internal_set_volume(value);
  // @@protoc_insertion_point(field_set:ZenboNurseHelperProtobuf.ReportAndCommand.volume)
}

// optional int32 speak_pitch = 15;
inline bool ReportAndCommand::_internal_has_speak_pitch() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool ReportAndCommand::has_speak_pitch() const {
  return _internal_has_speak_pitch();
}
inline void ReportAndCommand::clear_speak_pitch() {
  speak_pitch_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline int32_t ReportAndCommand::_internal_speak_pitch() const {
  return speak_pitch_;
}
inline int32_t ReportAndCommand::speak_pitch() const {
  // @@protoc_insertion_point(field_get:ZenboNurseHelperProtobuf.ReportAndCommand.speak_pitch)
  return _internal_speak_pitch();
}
inline void ReportAndCommand::_internal_set_speak_pitch(int32_t value) {
  _has_bits_[0] |= 0x00002000u;
  speak_pitch_ = value;
}
inline void ReportAndCommand::set_speak_pitch(int32_t value) {
  _internal_set_speak_pitch(value);
  // @@protoc_insertion_point(field_set:ZenboNurseHelperProtobuf.ReportAndCommand.speak_pitch)
}

// optional .ZenboNurseHelperProtobuf.ReportAndCommand.MoveModeEnum movemode = 16;
inline bool ReportAndCommand::_internal_has_movemode() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool ReportAndCommand::has_movemode() const {
  return _internal_has_movemode();
}
inline void ReportAndCommand::clear_movemode() {
  movemode_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::ZenboNurseHelperProtobuf::ReportAndCommand_MoveModeEnum ReportAndCommand::_internal_movemode() const {
  return static_cast< ::ZenboNurseHelperProtobuf::ReportAndCommand_MoveModeEnum >(movemode_);
}
inline ::ZenboNurseHelperProtobuf::ReportAndCommand_MoveModeEnum ReportAndCommand::movemode() const {
  // @@protoc_insertion_point(field_get:ZenboNurseHelperProtobuf.ReportAndCommand.movemode)
  return _internal_movemode();
}
inline void ReportAndCommand::_internal_set_movemode(::ZenboNurseHelperProtobuf::ReportAndCommand_MoveModeEnum value) {
  assert(::ZenboNurseHelperProtobuf::ReportAndCommand_MoveModeEnum_IsValid(value));
  _has_bits_[0] |= 0x00004000u;
  movemode_ = value;
}
inline void ReportAndCommand::set_movemode(::ZenboNurseHelperProtobuf::ReportAndCommand_MoveModeEnum value) {
  _internal_set_movemode(value);
  // @@protoc_insertion_point(field_set:ZenboNurseHelperProtobuf.ReportAndCommand.movemode)
}

// optional int32 stopmove = 17;
inline bool ReportAndCommand::_internal_has_stopmove() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool ReportAndCommand::has_stopmove() const {
  return _internal_has_stopmove();
}
inline void ReportAndCommand::clear_stopmove() {
  stopmove_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline int32_t ReportAndCommand::_internal_stopmove() const {
  return stopmove_;
}
inline int32_t ReportAndCommand::stopmove() const {
  // @@protoc_insertion_point(field_get:ZenboNurseHelperProtobuf.ReportAndCommand.stopmove)
  return _internal_stopmove();
}
inline void ReportAndCommand::_internal_set_stopmove(int32_t value) {
  _has_bits_[0] |= 0x00008000u;
  stopmove_ = value;
}
inline void ReportAndCommand::set_stopmove(int32_t value) {
  _internal_set_stopmove(value);
  // @@protoc_insertion_point(field_set:ZenboNurseHelperProtobuf.ReportAndCommand.stopmove)
}

// optional int32 predefined_action = 18;
inline bool ReportAndCommand::_internal_has_predefined_action() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool ReportAndCommand::has_predefined_action() const {
  return _internal_has_predefined_action();
}
inline void ReportAndCommand::clear_predefined_action() {
  predefined_action_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline int32_t ReportAndCommand::_internal_predefined_action() const {
  return predefined_action_;
}
inline int32_t ReportAndCommand::predefined_action() const {
  // @@protoc_insertion_point(field_get:ZenboNurseHelperProtobuf.ReportAndCommand.predefined_action)
  return _internal_predefined_action();
}
inline void ReportAndCommand::_internal_set_predefined_action(int32_t value) {
  _has_bits_[0] |= 0x00010000u;
  predefined_action_ = value;
}
inline void ReportAndCommand::set_predefined_action(int32_t value) {
  _internal_set_predefined_action(value);
  // @@protoc_insertion_point(field_set:ZenboNurseHelperProtobuf.ReportAndCommand.predefined_action)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ZenboNurseHelperProtobuf

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ZenboNurseHelperProtobuf::ReportAndCommand_MoveModeEnum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ZenboNurseHelperProtobuf::ReportAndCommand_MoveModeEnum>() {
  return ::ZenboNurseHelperProtobuf::ReportAndCommand_MoveModeEnum_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ServerSend_2eproto
